IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Approval]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE  {databaseOwner}[{objectQualifier}Engage_Approval](
	[ApprovalId] [int] NOT NULL IDENTITY(1,1),
	[RoutingEventId] [int] NOT NULL,
	[Email] [nvarchar](50) NOT NULL,
	[Approved] [bit] NOT NULL DEFAULT 0,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
	CONSTRAINT 
	[{objectQualifier}PK_Engage_Approval] PRIMARY KEY CLUSTERED 
	(
		[ApprovalId] ASC
	)	ON [PRIMARY]
	) 
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_EmailEvent]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE  {databaseOwner}[{objectQualifier}Engage_EmailEvent](
	[RoutingEventId] [int] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Purpose] [nvarchar](250) NOT NULL,
	[HtmlBodyLocation1] [nvarchar](250) NOT NULL,
	[HtmlBodyLocation2] [nvarchar](250) NOT NULL,
	[HtmlBodyLocation3] [nvarchar](250) NOT NULL,
	[MergeTemplate] [ntext] NULL,
	[Subject] [nvarchar](50) NOT NULL,
	[FromName] [nvarchar](50) NOT NULL,
	[FromEmail] [nvarchar](50) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
	CONSTRAINT 
	[{objectQualifier}PK_Engage_EmailEvent] PRIMARY KEY CLUSTERED 
	(
		[RoutingEventId] ASC
	)	ON [PRIMARY]
	) 
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Rsvp]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE  {databaseOwner}[{objectQualifier}Engage_Rsvp](
	[RsvpId] [int] NOT NULL IDENTITY(1,1),
	[EventId] [int] NOT NULL,
	[FirstName] [nvarchar](50) NOT NULL,
	[LastName] [nvarchar](50) NOT NULL,
	[Email] [nvarchar](50) NOT NULL,
	[Status] [nvarchar] (20) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),

	CONSTRAINT  [{objectQualifier}PK_Engage_Rsvp] PRIMARY KEY CLUSTERED 
		(
			[RsvpId] ASC
		)	ON [PRIMARY]
	) 
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Event]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	CREATE TABLE  {databaseOwner}[{objectQualifier}Engage_Event]
	(
		[EventId] [int] NOT NULL IDENTITY(1,1),
		[PortalId] [int] NOT NULL,
		[ModuleId] [int] NOT NULL,
		[Title] [nvarchar](250) NOT NULL,
		[Overview] [ntext] NULL,
		[EventStart] [datetime] NOT NULL,
		[EventEnd] [datetime] NULL,
		[Organizer] [nvarchar](50) NOT NULL,
		[OrganizerEmail] [nvarchar](50) NOT NULL,
		[Location] [nvarchar](500) NOT NULL,
		[LocationUrl] [nvarchar](500) NULL,
		[RecapUrl] [nvarchar](500) NULL,
		[InvitationUrl] [nvarchar](500) NULL,
		[CanRsvp] [bit] NOT NULL,
		[Cancelled] [bit] NOT NULL DEFAULT 0,
		[RecurrenceId] [int] NULL,
		[CreatedBy] [int] NOT NULL,
		[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
		[RevisingUser] [int] NOT NULL,
		[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
		CONSTRAINT [{objectQualifier}PK_Engage_Event] PRIMARY KEY CLUSTERED 
		(
			[EventId] ASC
		) ON [PRIMARY]
	) 
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Contact]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}Engage_Contact] (
	[ContactId] [int] idENTITY (1, 1) NOT NULL ,
	[PortalId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[Salutation] [nvarchar] (5) NOT NULL ,
	[FirstName] [nvarchar] (20) NOT NULL ,
	[MiddleInitial] [nvarchar] (1) NOT NULL ,
	[LastName] [nvarchar] (50) NULL ,
	[Email] [nvarchar] (100) NULL ,
	[Address1] [nvarchar] (100) NULL ,
	[Address2] [nvarchar] (100) NULL ,
	[City] [nvarchar] (100) NULL ,
	[State] [nvarchar] (2) NULL ,
	[Zip] [nvarchar] (10) NULL ,
	[Phone] [nvarchar] (12) NOT NULL ,
	[Fax] [nvarchar] (12) NOT NULL ,
	[Mobile] [nvarchar] (12) NOT NULL ,
	[SecondaryAddress1] [nvarchar] (100) NULL ,
	[SecondaryAddress2] [nvarchar] (100) NULL ,
	[SecondaryCity] [nvarchar] (100) NULL ,
	[SecondaryState] [nvarchar] (2) NULL ,
	[SecondaryZip] [nvarchar] (10) NULL ,
	[SecondaryPhone] [nvarchar] (12) NOT NULL ,
	[Company] [nvarchar] (50) NOT NULL ,
	[Source] [nvarchar] (100) NOT NULL ,
	[ProfessionalTitle] [nvarchar] (100) NOT NULL ,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_RoutingTransactionDetail]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}Engage_RoutingTransactionDetail] (
	[RoutingTransactionDetailid] [int] IDENTITY (1, 1) NOT NULL ,
	[RoutingTransactionid] [int] NOT NULL ,
	[Description] [text] NULL, 
	[Successful] [bit] NULL DEFAULT 0, 
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_RoutingEvent]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}Engage_RoutingEvent] (
	[RoutingEventId] [int] idENTITY (1, 1) NOT NULL ,
	[RoutingEventTypeId] [int] NOT NULL ,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_RoutingTransaction]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}Engage_RoutingTransaction] (
	[RoutingTransactionid] [int] IDENTITY (1, 1) NOT NULL ,
	[RoutingEventId] [int] NOT NULL ,
	[FirstName] [nvarchar] (20) NOT NULL ,
	[LastName] [nvarchar] (50) NULL ,
	[Email] [nvarchar] (100) NULL ,	
	[Undeliverable] [bit] NOT NULL ,
	[MergeData] [ntext] NULL,
	[Processed] [bit] NOT NULL ,
	[ActionRequired] [bit] NOT NULL ,
	[CompletionDate] [datetime] NULL ,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_lkpClassType]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}Engage_lkpClassType] (
	[ClassTypeId] [int] IDENTITY (1, 1) NOT NULL ,
	[ShortDescription] [nvarchar] (50) NOT NULL ,
	[LongDescription] [nvarchar] (250) NOT NULL ,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_lkpClass]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}Engage_lkpClass] (
	[ClassId] [int] IDENTITY (1, 1) NOT NULL ,
	[ClassTypeId] [int] NOT NULL ,
	[ClassName] [nvarchar] (100) NOT NULL ,
	[AssemblyName] [nvarchar] (100) NOT NULL ,
	[Description] [nvarchar] (250) NOT NULL ,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType] (
	[RoutingEventTypeid] [int] IDENTITY (1, 1) NOT NULL ,
	[ShortDescription] [nvarchar] (50) NOT NULL ,
	[LongDescription] [nvarchar] (250) NOT NULL ,
	[ClassId] [int] NOT NULL ,
	[ServiceEvent] [bit] NOT NULL ,
	[ScheduledEvent] [bit] NOT NULL ,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_RecurrenceType]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE  {databaseOwner}[{objectQualifier}Engage_RecurrenceType](
	[RecurrenceTypeId] [int] NOT NULL IDENTITY(1,1),
	[Name] [nvarchar](50) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
	CONSTRAINT 
	[{objectQualifier}PK_Engage_RecurrenceType] PRIMARY KEY CLUSTERED 
	(
		[RecurrenceTypeId] ASC
	)	ON [PRIMARY]
	) 
END
GO


IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Recurrence]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE  {databaseOwner}[{objectQualifier}Engage_Recurrence](
	[RecurrenceId] [int] NOT NULL IDENTITY(1,1),
	[RecurrenceTypeId] [int] NOT NULL,
	[Interval] [int] NULL,
	[Occurs] [int] NULL,
	[DayNumber] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
	CONSTRAINT 
	[{objectQualifier}PK_Engage_Recurrence] PRIMARY KEY CLUSTERED 
	(
		[RecurrenceId] ASC
	)	ON [PRIMARY]
	) 
END
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}PK_lkpClassType]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_lkpClassType] WITH NOCHECK ADD 
	CONSTRAINT [{objectQualifier}PK_lkpClassType] PRIMARY KEY  CLUSTERED 
	(
		[ClassTypeId]
	) ON [PRIMARY] 
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}PK_lkpClass]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_lkpClass] WITH NOCHECK ADD 
	CONSTRAINT [{objectQualifier}PK_lkpClass] PRIMARY KEY  CLUSTERED 
	(
		[ClassId]
	) ON [PRIMARY] 
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_Recurrence_Engage_RecurrenceType]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Recurrence] ADD 
	CONSTRAINT [{objectQualifier}FK_Engage_Recurrence_Engage_RecurrenceType] FOREIGN KEY 
	(
		[RecurrenceTypeId]
	) REFERENCES {databaseOwner}[{objectQualifier}Engage_RecurrenceType] (
		[RecurrenceTypeId]
	)
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}PK_RoutingEvent]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_RoutingEvent] WITH NOCHECK ADD 
	CONSTRAINT [{objectQualifier}PK_RoutingEvent] PRIMARY KEY  CLUSTERED 
	(
		[RoutingEventid]
	) ON [PRIMARY] 
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}PK_lkpRoutingEventType]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType] WITH NOCHECK ADD 
	CONSTRAINT [{objectQualifier}PK_lkpRoutingEventType] PRIMARY KEY  CLUSTERED 
	(
		[RoutingEventTypeid]
	) ON [PRIMARY] 
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}Engage_lkpRoutingEventType_ServiceEvent]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType] ADD 
	CONSTRAINT [{objectQualifier}DF_lkpRoutingEventType_ServiceEvent] DEFAULT (0) FOR [ServiceEvent]
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}Engage_lkpRoutingEventType_ServiceEvent]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType] ADD 
	CONSTRAINT [{objectQualifier}Engage_lkpRoutingEventType_ServiceEvent] DEFAULT (0) FOR [ScheduledEvent]
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}Engage_lkpRoutingEventType_ServiceEvent]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType] ADD 
	CONSTRAINT [{objectQualifier}Engage_lkpRoutingEventType_ServiceEvent] DEFAULT (getdate()) FOR [RevisionDate]
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}PK_Engage_RoutingTransaction]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_RoutingTransaction] WITH NOCHECK ADD 
	CONSTRAINT [{objectQualifier}PK_Engage_RoutingTransaction] PRIMARY KEY  CLUSTERED 
	(
		[RoutingTransactionid]
	) ON [PRIMARY] 
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}PK_Engage_RoutingTransactionDetail]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_RoutingTransactionDetail] WITH NOCHECK ADD 
	CONSTRAINT [{objectQualifier}PK_Engage_RoutingTransactionDetail] PRIMARY KEY  CLUSTERED 
	(
		[RoutingTransactionDetailid]
	) ON [PRIMARY] 
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_RoutingTransactionDetail_Engage_RoutingTransaction]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_RoutingTransactionDetail] ADD 
	CONSTRAINT [{objectQualifier}FK_Engage_RoutingTransactionDetail_Engage_RoutingTransaction] FOREIGN KEY 
	(
		[RoutingTransactionid]
	) REFERENCES {databaseOwner}[{objectQualifier}Engage_RoutingTransaction] (
		[RoutingTransactionid]
	)
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}PK_Engage_Approval]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Approval] WITH NOCHECK ADD 
	CONSTRAINT [{objectQualifier}PK_Engage_Approval] PRIMARY KEY  CLUSTERED 
	(
		[ApprovalId]
	) ON [PRIMARY] 
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_RoutingEvent_Engage_Approval]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Approval] ADD 
	CONSTRAINT [{objectQualifier}FK_Engage_RoutingEvent_Engage_Approval] FOREIGN KEY 
	(
		[RoutingEventId]
	) REFERENCES {databaseOwner}[{objectQualifier}Engage_RoutingEvent] (
		[RoutingEventId]
	)
GO


if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_lkpClassType_Engage_lkpClass]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_lkpClass] ADD 
	CONSTRAINT [{objectQualifier}FK_Engage_lkpClassType_Engage_lkpClass] FOREIGN KEY 
	(
		[ClassTypeId]
	) REFERENCES {databaseOwner}[{objectQualifier}Engage_lkpClassType] (
		[ClassTypeId]
	)
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_lkpClass_Engage_lkpRoutingEventType]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType] ADD 
	CONSTRAINT [{objectQualifier}FK_Engage_lkpClass_Engage_lkpRoutingEventType] FOREIGN KEY 
	(
		[ClassId]
	) REFERENCES {databaseOwner}[{objectQualifier}Engage_lkpClass] (
		[ClassId]
	)
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_RoutingTransaction_Engage_RoutingEvent]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_RoutingTransaction] ADD 
	CONSTRAINT [{objectQualifier}FK_Engage_RoutingTransaction_Engage_RoutingEvent] FOREIGN KEY 
	(
		[RoutingEventid]
	) REFERENCES {databaseOwner}[{objectQualifier}Engage_RoutingEvent] (
		[RoutingEventid]
	)
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_RoutingEvent_Engage_lkpRoutingEventType]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_RoutingEvent] ADD 
	CONSTRAINT [{objectQualifier}FK_Engage_RoutingEvent_Engage_lkpRoutingEventType] FOREIGN KEY 
	(
		[RoutingEventTypeid]
	) REFERENCES {databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType] (
		[RoutingEventTypeid]
	)
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_Event_Engage_Rsvp]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Rsvp] ADD 
	CONSTRAINT [{objectQualifier}FK_Engage_Event_Engage_Rsvp] FOREIGN KEY 
	(
		[EventId]
	) REFERENCES {databaseOwner}[{objectQualifier}Engage_Event] (
		[EventId]
	)
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_EmailEvent_Engage_RoutingEvent]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_EmailEvent] ADD CONSTRAINT
	[{objectQualifier}FK_Engage_EmailEvent_Engage_RoutingEvent] FOREIGN KEY
	(
		[RoutingEventid]
	) REFERENCES {databaseOwner}[{objectQualifier}Engage_RoutingEvent]
	(
		[RoutingEventId]
	) 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEvents]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetEvents]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvents] 
(@portalId int, @sortColumn nvarchar(200), @index int, @pageSize int, @showAll bit)
AS
BEGIN

	Create table #results 
	(
		[Id] int not null IDENTITY(1,1),
		[EventId] [int],
		[TotalRecords] int
	)
	
	declare @sql varchar(8000)

	set @sql = 'insert into #results ([EventId]) '
	set @sql = @sql + 'Select [EventId] '
	set @sql = @sql + 'from '
	set @sql = @sql + '{databaseOwner}[{objectQualifier}Engage_Event] '
	set @sql = @sql + 'where PortalId = ' + STR(@portalId)
	if (@showAll = 0)
	begin
		set @sql = @sql + ' and Cancelled = 0 '
		set @sql = @sql + ' and EventStart > GETDATE() '
	end
	
	--print (@sql)
	exec (@sql)

	DECLARE @rows int
	set @rows = @@RowCount

	update #results set TotalRecords = @rows

	if (@PageSize = 0)
	 	BEGIN
			set @sql = 'Select e.*,	r.TotalRecords from #results r '
			set @sql = @sql + 'join {databaseOwner}[{objectQualifier}Engage_Event] e on (r.EventId = e.EventId) '
			set @sql = @sql + 'Order by ' + @sortColumn
	 	END
	ELSE
	 	BEGIN
			set @sql = 'select e.*,	r.TotalRecords from #results r '
			set @sql = @sql + 'join {databaseOwner}[{objectQualifier}Engage_Event] e on (r.EventId = e.EventId) '
	 		set @sql = @sql + 'where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1 '
			set @sql = @sql + 'Order by ' + @sortColumn
	 	END

	exec (@sql)	
END

GO

INSERT INTO {databaseOwner}[{objectQualifier}Engage_Event]
([PortalId] ,[ModuleId] ,[Title] ,[Overview]  ,[EventStart]  ,[Location] ,[LocationUrl],[RecapUrl]
 ,[InvitationUrl] ,[CanRsvp] ,[CreatedBy] ,[RevisingUser] , [Organizer], [OrganizerEmail])
VALUES (0, 0, 'DotNetNuke Skinning', 'This event will cover skinning concepts...', 
GETDATE() + 5,
'2 Microsoft Place', 'http://engagesoftware.com/training', 'http://engagesoftware.com/training.aspx',
'http://engagesoftware.com/training', 1, 1, 1, 'Coung Dang', 'cdang@engagesoftware.com')
GO

INSERT INTO {databaseOwner}[{objectQualifier}Engage_Event]
([PortalId] ,[ModuleId] ,[Title] ,[Overview]  ,[EventStart]  ,[Location] ,[LocationUrl],[RecapUrl]
 ,[InvitationUrl] ,[CanRsvp] ,[CreatedBy] ,[RevisingUser] , [Organizer], [OrganizerEmail])
VALUES (0, 0, 'Object Oriented Programming Talk', 'Discuss Object Oriented programming concepts and why use them.', 
GETDATE() + 3,
'3 Microsoft Place', 'http://engagesoftware.com/training', 'http://engagesoftware.com/training',
'http://engagesoftware.com/training', 1, 1, 1, 'Ian Robinson', 'irobinson@engagesoftware.com')
GO

INSERT INTO {databaseOwner}[{objectQualifier}Engage_Event]
([PortalId] ,[ModuleId] ,[Title] ,[Overview]  ,[EventStart]  ,[Location] ,[LocationUrl],[RecapUrl]
 ,[InvitationUrl] ,[CanRsvp] ,[CreatedBy] ,[RevisingUser] , [Organizer], [OrganizerEmail])
VALUES (0, 0, 'DotNuke Module Development', 'Come learn about module development techniques', 
GETDATE() + 35,
'4 Microsoft Place', 'http://engagesoftware.com/training', 'http://engagesoftware.com/training',
'http://engagesoftware.com/training', 1, 1, 1, 'Chris Hammond', 'chammond@engagesoftware.com')
GO


--stored procedures
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertRoutingEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertRoutingEvent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertRoutingEvent] 
(
@RoutingEventTypeId int,
@CreatedBy int
)
AS
BEGIN
	
	Insert into [{objectQualifier}Engage_RoutingEvent] 
	(RoutingEventTypeID, CreatedBy, RevisingUser)
	Values (@RoutingEventTypeId, @createdBy,@createdBy)

	SELECT @@Identity

END
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertEmailEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertEmailEvent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertEmailEvent] 
(
@RoutingEventId int,
@Name nvarchar(200),
@Purpose nvarchar(500),
@HtmlBodyLocation1 nvarchar(250),
@HtmlBodyLocation2 nvarchar(250),
@HtmlBodyLocation3 nvarchar(250),
@MergeTemplate ntext,
@Subject nvarchar(100),
@FromName nvarchar(100),
@FromEmail nvarchar(100),
@CreatedBy int
)
AS
BEGIN
	
	Insert into [{objectQualifier}Engage_EmailEvent] 
	(RoutingEventId, [Name], Purpose, HtmlBodyLocation1, HtmlBodyLocation2, HtmlBodyLocation3, MergeTemplate, 
	Subject,FromName,FromEmail,CreatedBy,RevisingUser)
	Values (@RoutingEventId, @Name, @Purpose, @HtmlBodyLocation1, @HtmlBodyLocation2, @HtmlBodyLocation3, @MergeTemplate, 
	@Subject, @FromName, @FromEmail, @CreatedBy, @CreatedBy)

	SELECT @@Identity

END
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetPendingTransactions]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetPendingTransactions]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetPendingTransactions] 
(
@RoutingEventTypeId int,
@MaxPerCycle int
)
AS
BEGIN
	
	declare @sql varchar(8000)

	set @sql = 'SELECT Top '
	set @sql = @sql + convert(varchar(20), @MaxPerCycle)
	set @sql = @sql + ' * '
	set @sql = @sql + 'FROM {databaseOwner}[{objectQualifier}Engage_RoutingTransaction] rt '
	set @sql = @sql + 'JOIN {databaseOwner}[{objectQualifier}Engage_RoutingEvent] re on (re.RoutingEventId = rt.RoutingEventId) '
	set @sql = @sql + 'JOIN {databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType] ret on (ret.RoutingEventTypeId = re.RoutingEventTypeId) '
	set @sql = @sql + 'JOIN {databaseOwner}[{objectQualifier}Engage_lkpClass] c on (c.ClassId = ret.ClassId) '
	set @sql = @sql + 'WHERE ActionRequired = 1 '
	set @sql = @sql + 'AND CompletionDate Is Null '
	if (@RoutingEventTypeId > 0)
	begin
		set @sql = @sql + 'AND ret.RoutingEventTypeId = '
		set @sql = @sql + str(@RoutingEventTypeId)
	end
	set @sql = @sql + ' ORDER BY re.CreationDate'

	--print (@sql)
	exec (@sql)

END
GO

insert into {databaseOwner}[{objectQualifier}Engage_lkpClassType] values ('Routing Event', 'Routing Event', 0, GETDATE(), 0, GETDATE())
GO

insert into {databaseOwner}[{objectQualifier}Engage_lkpClass] (ClassTypeId, ClassName, AssemblyName, Description, CreatedBy, RevisingUser)
Select ClassTypeId, 'Engage.Communication.Email.EmailTransaction', 'Engage.Communication', 'Email Transaction Class', 1,1
from {databaseOwner}[{objectQualifier}Engage_lkpClassType] where ShortDescription = 'Routing Event'
GO

insert into {databaseOwner}[{objectQualifier}Engage_lkpClass] (ClassTypeId, ClassName, AssemblyName, Description, CreatedBy, RevisingUser)
Select ClassTypeId, 'Engage.Communication.Email.ReminderEmailTransaction', 'Engage.Communication', 'Reminder Email Transaction Class', 1,1
from {databaseOwner}[{objectQualifier}Engage_lkpClassType] where ShortDescription = 'Routing Event'
GO

Insert into {databaseOwner}[{objectQualifier}Engage_lkpRoutingeventType] (ClassId, ShortDescription, LongDescription, ServiceEvent,
ScheduledEvent, CreatedBy, revisingUser)
Select ClassId, 'Invitation', 'Invitation Email', 1, 1, 0, 0
from {databaseOwner}[{objectQualifier}Engage_lkpClass] where ClassName = 'Engage.Communication.Email.EmailTransaction'
GO

Insert into {databaseOwner}[{objectQualifier}Engage_lkpRoutingeventType] (ClassId, ShortDescription, LongDescription, ServiceEvent,
ScheduledEvent, CreatedBy, revisingUser)
Select ClassId, 'Reminder', 'Reminder Email', 1, 1, 0, 0
from {databaseOwner}[{objectQualifier}Engage_lkpClass] where ClassName = 'Engage.Communication.Email.ReminderEmailTransaction'
GO

Insert into {databaseOwner}[{objectQualifier}Engage_lkpRoutingeventType] (ClassId, ShortDescription, LongDescription, ServiceEvent,
ScheduledEvent, CreatedBy, revisingUser)
Select ClassId, 'Recap', 'Recap Email', 1, 1, 0, 0
from {databaseOwner}[{objectQualifier}Engage_lkpClass] where ClassName = 'Engage.Communication.Email.EmailTransaction'
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertRoutingTransaction]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertRoutingTransaction]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertRoutingTransaction] 
(@RoutingEventId int,
@FirstName nvarchar(20),
@LastName nvarchar(50),
@Email nvarchar(100),
@MergeData ntext,
@CreatedBy int)
AS
INSERT INTO {databaseOwner}[{objectQualifier}Engage_RoutingTransaction]
	   ([RoutingEventId]
	   ,[FirstName]
	   ,[LastName]
	   ,[Email]
	   ,[Undeliverable]
	   ,[MergeData]
	   ,[Processed]
	   ,[ActionRequired]
	   ,[CompletionDate]
	   ,[CreatedBy]
	   ,[CreationDate]
	   ,[RevisingUser]
	   ,[RevisionDate])
 VALUES
	   (@RoutingEventId,
		@FirstName,
		@LastName, 
		@Email,
		0,
		@MergeData,
		0, 
		1,
		null,
		@CreatedBy,
		GETDATE(),
		@CreatedBy,
		GETDATE())

SELECT @@Identity
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetUndeliverable]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetUndeliverable]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetUndeliverable] (@Email nvarchar(250))
AS
BEGIN

	SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}Engage_RoutingTransaction]
	WHERE Undeliverable = 1 
	AND Email = @email

END

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEmailEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetEmailEvent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEmailEvent] 
(
@RoutingEventId int
)
AS
BEGIN
	Select * From [{objectQualifier}Engage_EmailEvent]
	where RoutingEventId = @RoutingEventId
END

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spCompleteTransaction]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spCompleteTransaction]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spCompleteTransaction] 
(
@RoutingTransactionId int,
@RevisingUser int
)
AS

UPDATE {databaseOwner}[{objectQualifier}Engage_RoutingTransaction]
SET CompletionDate = GETDATE(), Processed = 1, ActionRequired = 1, RevisingUser = @RevisingUser
WHERE RoutingTransactionId = @RoutingTransactionId

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertTransactionDetail]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertTransactionDetail]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertTransactionDetail] 
(
@RoutingTransactionId int,
@Description ntext, 
@Successful bit,
@RevisingUser int
)
AS

INSERT INTO {databaseOwner}[{objectQualifier}Engage_RoutingTransactionDetail] 
(RoutingTransactionId, Description, Successful, Createdby, RevisingUser)
VALUES
(@RoutingTransactionId, @Description, @Successful, @RevisingUser, @RevisingUser)

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spDeleteTransactionDetails]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spDeleteTransactionDetails]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spDeleteTransactionDetails] 
(
@RoutingTransactionId int
)
AS

DELETE FROM {databaseOwner}[{objectQualifier}Engage_RoutingTransactionDetail] 
WHERE RoutingTransactionId = @RoutingTransactionId

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetTransactionDetails]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetTransactionDetails]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetTransactionDetails] 
(
@RoutingTransactionId int
)
AS

SELECT * FROM [{objectQualifier}Engage_RoutingTransactionDetail] 
WHERE RoutingTransactionId = @RoutingTransactionId

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetApprovals]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetApprovals]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetApprovals] 
(
@RoutingEventId int
)
AS

SELECT Approved, Email, ApprovalId 
FROM {databaseOwner}[{objectQualifier}Engage_RoutingEvent] re
join {databaseOwner}[{objectQualifier}Engage_Approval] a on (a.RoutingEventId = re.RoutingEventId)
where a.RoutingEventId = @RoutingEventId

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetEvent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvent] (@EventId int)
AS
BEGIN

	SELECT * 
	FROM {databaseOwner}[{objectQualifier}Engage_Event]
	WHERE EventId = @EventId
END
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertEvent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertEvent] 
(
@PortalId int,
@ModuleId int,
@Title nvarchar(500),
@Overview ntext,
@EventStart DateTime,
@EventEnd DateTime,
@Organizer nvarchar(100),
@OrganizerEmail nvarchar(100),
@Location nvarchar(1000),
@LocationUrl nvarchar(1000),
@InvitationUrl nvarchar(1000),
@RecapUrl nvarchar(1000),
@RecurrenceId int,
@CanRsvp int,
@CreatedBy int
)
AS
BEGIN
	
	if (@RecurrenceId < 0)
	begin
		set @RecurrenceId = null
	end
	
	Insert into {databaseOwner}[{objectQualifier}Engage_Event] 
	(
		[PortalId], [ModuleId], [Title], [Overview], [EventStart], [EventEnd], [Organizer], [OrganizerEmail],
		[Location], [LocationUrl], [InvitationUrl], [RecapUrl], [RecurrenceId], [CanRsvp], [CreatedBy], [RevisingUser]
	)
	Values
	(
		@PortalId, @ModuleId, @Title, @Overview, @EventStart, @EventEnd, @Organizer, @OrganizerEmail,
		@Location, @LocationUrl, @InvitationUrl,  @RecapUrl, @RecurrenceId, @CanRsvp, @CreatedBy, @CreatedBy
	)

	SELECT @@Identity

END
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spUpdateEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spUpdateEvent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spUpdateEvent] 
(
@EventId int,
@Title nvarchar(500),
@Overview ntext,
@EventStart DateTime,
@EventEnd DateTime,
@Organizer nvarchar(100),
@OrganizerEmail nvarchar(100),
@Location nvarchar(1000),
@LocationUrl nvarchar(1000),
@InvitationUrl nvarchar(1000),
@RecapUrl nvarchar(1000),
@RecurrenceId int,
@CanRsvp bit,
@Cancelled bit,
@RevisingUser int
)
AS
BEGIN
	
	if (@RecurrenceId < 0)
	begin
		set @RecurrenceId = null
	end

	UPDATE {databaseOwner}[{objectQualifier}Engage_Event] 
	SET [Title] = @Title, 
		[Overview] = @Overview, 
		[EventStart] = @EventStart, 
		[EventEnd] = @EventEnd, 
		[Organizer] = @Organizer, 
		[OrganizerEmail] = @OrganizerEmail,
		[Location] = @Location, 
		[LocationUrl] = @LocationUrl, 
		[InvitationUrl] = @InvitationUrl, 
		[RecapUrl] = @RecapUrl, 
		[RecurrenceId] = @RecurrenceId, 
		[CanRsvp] = @CanRsvp, 
		[Cancelled]  = @Cancelled,
		[RevisingUser] = @RevisingUser, 
		[RevisionDate] = GETDATE()
	WHERE EventId = @EventId
END
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertRsvp]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertRsvp]

GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertRsvp] 
(
@EventId int,
@FirstName nvarchar(100),
@LastName nvarchar(100),
@Email nvarchar(100),
@Status nvarchar(20),
@RevisingUser int
)
AS
BEGIN
	
	INSERT INTO {databaseOwner}[{objectQualifier}Engage_Rsvp] ([EventId], [FirstName], [LastName], [Email], [Status], [Createdby], [RevisingUser])
	VALUES (@EventId, @FirstName, @LastName, @Email, @Status, @RevisingUser, @RevisingUser)
END

SELECT @@IDENTITY

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spUpdateRsvp]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spUpdateRsvp]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spUpdateRsvp] 
(
@RsvpId int,
@FirstName nvarchar(100),
@LastName nvarchar(100),
@Email nvarchar(100),
@Status nvarchar(20),
@RevisingUser int
)
AS
BEGIN
	
	UPDATE {databaseOwner}[{objectQualifier}Engage_Rsvp] 
		SET [FirstName] = @FirstName, 
		[LastName] =@LastName, 
		[Email] = @Email, 
		[Status] = @Status, 
		[Createdby] = @RevisingUser, 
		[RevisingUser] = @RevisingUser
	WHERE RsvpId = @RsvpId
END

GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_EventMessage]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE  {databaseOwner}[{objectQualifier}Engage_EventMessage](
	[EventMessageId] [int] NOT NULL IDENTITY(1,1),
	[EventId] [int] NOT NULL,
	[MessageId] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL DEFAULT GETDATE(),
	[RevisingUser] [int] NOT NULL,
	[RevisionDate] [datetime] NOT NULL DEFAULT GETDATE(),
	CONSTRAINT 
	[{objectQualifier}PK_Engage_EventMessage] PRIMARY KEY CLUSTERED 
	(
		[EventMessageId] ASC
	)	ON [PRIMARY]
	) 
END
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spWriteMessageId]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spWriteMessageId]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spWriteMessageId] 
(
@EventId int,
@MessageId int,
@CreatedBy int
)
AS
BEGIN

	INSERT INTO {databaseOwner}[{objectQualifier}Engage_EventMessage] ([EventId], [MessageId], [RevisingUser], [CreatedBy])
	VALUES (@EventId, @MessageId, @CreatedBy, @CreatedBy)	
	
END

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetRsvpByEmail]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetRsvpByEmail]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetRsvpByEmail] 
(
@EventId int,
@Email nvarchar(100)
)
AS
BEGIN

	SELECT * 
	FROM {databaseOwner}[{objectQualifier}Engage_Rsvp]
	WHERE EventId = @EventId
	AND Email = @Email
	
END

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetRsvps]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetRsvps]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetRsvps]
(
@EventId int,
@Status nvarchar(100),
@sortColumn nvarchar(200), 
@index int, 
@pageSize int
)
AS
BEGIN

	Create table #results 
	(
		[Id] int not null IDENTITY(1,1),
		[RsvpId] [int],
		[TotalRecords] int
	)
	
	declare @sql varchar(8000)

	set @sql = 'insert into #results ([RsvpId]) '
	set @sql = @sql + 'Select [RsvpId] '
	set @sql = @sql + 'from '
	set @sql = @sql + '{databaseOwner}[{objectQualifier}Engage_Rsvp '
	set @sql = @sql + 'Where EventId = ' + STR(@EventId)
	if (@Status != '')
	begin
		set @sql = @sql + ' and Status = ''' + @Status + ''''
	end
	set @sql = @sql + ' Order by ' + @sortColumn

	--print (@sql)
	exec (@sql)

	DECLARE @rows int
	set @rows = @@RowCount

	update #results set TotalRecords = @rows

	if (@PageSize = 0)
	 	BEGIN
	 		select e.*,	r.TotalRecords from #results r
			join {databaseOwner}[{objectQualifier}Engage_Rsvp] e on (r.RsvpId = e.RsvpId)
	 	END
	ELSE
	 	BEGIN
	 		select e.*,	r.TotalRecords from #results r
			join {databaseOwner}[{objectQualifier}Engage_Rsvp] e on (r.RsvpId = e.RsvpId)
	 		where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1
	 	END
	
END
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetRsvpSummary]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetRsvpSummary]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetRsvpSummary]
(
@PortalId int,
@sortColumn nvarchar(200), 
@index int, 
@pageSize int
)
AS
BEGIN

	Create table #results 
	(
		[Id] int not null IDENTITY(1,1),
		[EventId] [int],
		[Title] [nvarchar] (100),
		[EventStart] datetime,
		[Attending] int,
		[NotAttending] int,
		[NoResponse] int,
		[TotalRecords] int
	)


	declare @sql varchar(8000)
	declare @Attending nvarchar(20), @NotAttending nvarchar(20), @NoResponse nvarchar(20)
	select @Attending = 'Attending'
	select @NotAttending = 'NotAttending'
	select @NoResponse = 'NoResponse'

	set @sql = 'insert into #results ([EventId], [Title], [EventStart], [Attending], [NotAttending], [NoResponse]) '
	set @sql = @sql + 'Select distinct e.EventId, e.Title, e.EventStart, '
	set @sql = @sql + '(Select Count(*) from [{objectQualifier}Engage_Rsvp] where EventId = e.EventId and Status = ''' + @Attending + ''' ), '
	set @sql = @sql + '(Select Count(*) from [{objectQualifier}Engage_Rsvp] where EventId = e.EventId and Status = ''' + @NotAttending + '''), '
	set @sql = @sql + '(Select Count(*) from [{objectQualifier}Engage_Rsvp] where EventId = e.EventId and Status = ''' + @NoResponse + ''') '
	set @sql = @sql + ' FROM {databaseOwner}[{objectQualifier}Engage_Event] e '
	set @sql = @sql + ' JOIN {databaseOwner}[{objectQualifier}Engage_Rsvp] r ON (r.EventID = e.EventId) '
	set @sql = @sql + ' WHERE e.PortalId = ' + str(@PortalId)
	set @sql = @sql + ' Order by ' + @sortColumn

	print (@sql)
	exec (@sql)

	DECLARE @rows int
	set @rows = @@RowCount

	update #results set TotalRecords = @rows

	if (@PageSize = 0)
	 	BEGIN
	 		select * from #results
	 	END
	ELSE
	 	BEGIN
	 		select * from #results
	 		where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1
	 	END
END
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_EventMessage_Engage_Event]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_EventMessage] ADD 
	CONSTRAINT [{objectQualifier}FK_Engage_EventMessage_Engage_Event] FOREIGN KEY 
	(
		[EventId]
	) REFERENCES {databaseOwner}[{objectQualifier}Engage_Event] (
		[EventId]
	)
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEventsSpecific]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetEventsSpecific]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEventsSpecific] 
(@portalId int, @currentMonth bit, @index int, @pageSize int)
AS
BEGIN

	Create table #results 
	(
		[Id] int not null IDENTITY(1,1),
		[EventId] [int],
		[TotalRecords] int
	)
	
	declare @sql varchar(8000)

	set @sql = 'insert into #results ([EventId]) '
	set @sql = @sql + 'Select [EventId] '
	set @sql = @sql + 'from '
	set @sql = @sql + '{databaseOwner}[{objectQualifier}Engage_Event '
	set @sql = @sql + 'where PortalId = ' + STR(@portalId)
	if (@currentMonth = 1)
	begin
		set @sql = @sql + ' and (Month(EventStart) = Month(GETDATE()) and EventStart > GetDate())'
	end
	else
	begin
		set @sql = @sql + ' and Month(EventStart) != Month(GETDATE())'
		set @sql = @sql + ' and Month(EventStart) > Month(GETDATE())'
	end
	set @sql = @sql + ' and Cancelled = 0 '
	set @sql = @sql + ' Order by EventStart ASC '
	

	--print (@sql)
	exec (@sql)

	DECLARE @rows int
	set @rows = @@RowCount

	update #results set TotalRecords = @rows

	if (@PageSize = 0)
	 	BEGIN
	 		select e.*,	r.TotalRecords from #results r
			join {databaseOwner}[{objectQualifier}Engage_Event] e on (r.EventId = e.EventId)
	 	END
	ELSE
	 	BEGIN
	 		select e.*,	r.TotalRecords from #results r
			join {databaseOwner}[{objectQualifier}Engage_Event] e on (r.EventId = e.EventId)
	 		where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1
	 	END
	
END

GO

INSERT INTO {databaseOwner}[{objectQualifier}Schedule] VALUES ('Engage.Dnn.Events.Components.EmailScheduler', 5, 'm',	60,	's', 25, '', 0,	1, '', NULL)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertApproval]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertApproval]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertApproval] 
(
@RoutingEventId int,
@Recipient nvarchar(100),
@CreatedBy int
)
AS

INSERT INTO [{objectQualifier}Engage_Approval] (RoutingEventId, Email, CreatedBy, RevisingUser)
VALUES (@RoutingEventId, @Recipient, @CreatedBy, @CreatedBy)

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spDeleteEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spDeleteEvent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spDeleteEvent] 
(
@EventId int
)
AS

begin transaction

DELETE {databaseOwner}[{objectQualifier}Engage_EventMessage] 
WHERE EventID = @EventId

DELETE {databaseOwner}[{objectQualifier}Engage_Rsvp] 
WHERE EventID = @EventId

DELETE {databaseOwner}[{objectQualifier}Engage_Event] 
WHERE EventID = @EventId

commit transaction

GO

