IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spGetEvents]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvents]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvents](
    @portalId int, 
    @showAll bit,
    @featured bit,
    @hideFullEvents bit,
    @email nvarchar(50),
    @startDate datetime,
    @endDate datetime,
    @categoryIds nvarchar(4000)
)
AS
BEGIN
    DECLARE @sql nvarchar(4000), 
            @Attending nvarchar(20)
    SET @Attending = N'Attending'
    SET @sql = N'
     SELECT EventId, ModuleId, Title, Overview, EventStart, EventEnd, Organizer, OrganizerEmail, Location, 
            RecapUrl, InvitationUrl, AllowRegistrations, Canceled, CreatedBy, Description, IsDeleted, 
            IsFeatured, RecurrenceRule, RecurrenceParentId, TimeZoneOffset, InDaylightTime, Capacity, 
            CapacityMetMessage, CategoryId
     FROM  {databaseOwner}[{objectQualifier}Engage_Event] e
     WHERE PortalId = @portalId
       AND (@featured = 0 OR IsFeatured = @featured)
       AND (@showAll = 1 OR Canceled = @showAll)
       AND (EventStart <= @endDate OR @endDate IS NULL)
       AND (
            (RecurrenceRule IS NULL AND (EventEnd >= @startDate OR @startDate IS NULL))
            OR 
            (RecurrenceRule IS NOT NULL AND (FinalRecurringEndDate IS NULL OR FinalRecurringEndDate >= @startDate OR @startDate IS NULL))
          )
       AND (@hideFullEvents = 0 
            OR AllowRegistrations = 0 
            OR Capacity IS NULL 
            OR (@email IS NOT NULL AND EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}Engage_Response] r WHERE r.EventId = e.EventId AND r.EventStart = e.EventStart AND r.Status = @Attending AND r.Email = @email)) 
            OR Capacity > (SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}Engage_Response] r WHERE r.EventId = e.EventId AND r.EventStart = e.EventStart AND r.Status = @Attending))'

    IF @categoryIds IS NOT NULL
    BEGIN
        SET @sql = @sql + N'AND CategoryId IN (' + @categoryIds + N')'
    END

    EXEC sp_executesql @sql,
       N'@portalId int, @showAll bit, @featured bit, @startDate datetime, @endDate datetime, @hideFullEvents bit, @email nvarchar(50), @Attending nvarchar(20)',
       @portalId=@portalId, @showAll=@showAll, @featured=@featured, @startDate=@startDate, @endDate=@endDate, @hideFullEvents=@hideFullEvents, @email=@email, @Attending=@Attending
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spDeleteEvent]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spDeleteEvent]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spDeleteEvent](
    @EventId int
)
AS
BEGIN TRANSACTION

DELETE {databaseOwner}[{objectQualifier}Engage_Response] 
WHERE EventID = @EventId

DELETE {databaseOwner}[{objectQualifier}Engage_Event] 
WHERE EventID = @EventId

COMMIT TRANSACTION
GO


IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spGetResponseReport]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetResponseReport]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetResponseReport] (
    @startDate datetime,
    @endDate datetime,
    @categoryIds nvarchar(4000)
)
AS
BEGIN

DECLARE @sql nvarchar(4000)

SET @sql = N'
    SELECT 
        ec.Name AS CategoryName,
        e.Title AS EventTitle,
        r.EventStart,
        DATEADD(ms, DATEDIFF(ms, e.EventStart, e.EventEnd), r.EventStart) AS EventEnd,
        r.FirstName,
        r.LastName,
        r.Email,
        r.CreationDate As ResponseDate,
        r.Status
    FROM 
        {databaseOwner}[{objectQualifier}Engage_Response] r
        JOIN {databaseOwner}[{objectQualifier}Engage_Event] e on r.EventId = e.EventId
        JOIN {databaseOwner}[{objectQualifier}Engage_EventCategory] ec on e.CategoryId = ec.CategoryId
    WHERE
        (@startDate IS NULL OR r.EventStart >= @startDate)
        AND (@endDate IS NULL OR DATEADD(ms, DATEDIFF(ms, e.EventStart, e.EventEnd), r.EventStart) <= @endDate)'

    IF @categoryIds IS NOT NULL
    BEGIN
        SET @sql = @sql + N' AND e.CategoryId IN (' + @categoryIds + N')'
    END
    SET @sql = @sql + N' 
        ORDER BY r.EventStart, e.EventId, r.Status, r.CreationDate'

    --PRINT (@sql)
    EXEC sp_executesql @sql,
        N'@startDate datetime, @endDate datetime',
        @startDate=@startDate, @endDate=@endDate
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spGetResponses]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetResponses]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetResponses] (
    @EventId int,
    @EventStart datetime,
    @Status nvarchar(100),
    @sortColumn nvarchar(200), 
    @index int, 
    @pageSize int,
    @categoryIds nvarchar(4000)
)
AS
BEGIN

CREATE TABLE #results (
[Id] int NOT NULL IDENTITY(1,1),
[ResponseId] [int]
)
    
DECLARE @sql nvarchar(4000)

SET @sql = N'
    INSERT INTO #results ([ResponseId]) 
    SELECT [ResponseId] 
    FROM {databaseOwner}[{objectQualifier}Engage_Response] r '

IF @categoryIds IS NOT NULL 
BEGIN
    SET @sql = @sql + N'
    JOIN {databaseOwner}[{objectQualifier}Engage_Event] e ON r.EventId = e.EventId '
END

SET @sql = @sql + N'
    WHERE r.EventId = @EventId
      AND r.EventStart = @EventStart
      AND (r.Status = @Status OR @Status = '''') ' 
      
IF @categoryIds IS NOT NULL 
BEGIN
    SET @sql = @sql + N' AND e.CategoryId IN (' + @categoryIds + N')'
END
SET @sql = @sql + N' ORDER BY ' + @sortColumn

--PRINT (@sql)
EXEC sp_executesql @sql,
    N'@EventId int,	@EventStart datetime, @Status nvarchar(100)',
    @EventId=@EventId,@EventStart=@EventStart,@Status=@Status

SELECT @@RowCount AS TotalRecords

IF (@PageSize = 0)
    BEGIN
        SELECT re.* FROM #results r
        JOIN {databaseOwner}[{objectQualifier}Engage_Response] re ON (r.ResponseId = re.ResponseId)
    END
ELSE
    BEGIN
        SELECT re.* FROM #results r
        JOIN {databaseOwner}[{objectQualifier}Engage_Response] re ON (r.ResponseId = re.ResponseId)
        WHERE (id >= @index * @PageSize + 1) AND id < (@index * @PageSize) + @PageSize + 1
    END
END
GO
