IF NOT EXISTS (SELECT 1 FROM syscolumns WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Event]', N'U') AND name = 'TimeZone')
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Event]
        ADD TimeZone nvarchar(50) NOT NULL 
            CONSTRAINT {objectQualifier}DF_Engage_Event_TimeZone DEFAULT ''
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spGetEvents]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvents]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvents] (
    @portalId int, 
    @showAll bit,
    @featured bit,
    @hideFullEvents bit,
    @email nvarchar(50),
    @startDate datetime,
    @endDate datetime,
    @categoryIds nvarchar(4000))
AS
BEGIN
    DECLARE @sql nvarchar(4000), 
            @Attending nvarchar(20)
    SET @Attending = N'Attending'
    SET @sql = N'
     SELECT EventId, ModuleId, Title, Overview, EventStart, EventEnd, Organizer, OrganizerEmail, Location, 
            RecapUrl, InvitationUrl, AllowRegistrations, Canceled, CreatedBy, CreationDate, RevisionDate, Description, IsDeleted, 
            IsFeatured, RecurrenceRule, RecurrenceParentId, TimeZone, Capacity, CapacityMetMessage, CategoryId
     FROM  {databaseOwner}[{objectQualifier}Engage_Event] e
     WHERE PortalId = @portalId
       AND (@featured = 0 OR IsFeatured = @featured)
       AND (@showAll = 1 OR Canceled = @showAll)
       AND (EventStart <= @endDate OR @endDate IS NULL)
       AND (
            (RecurrenceRule IS NULL AND (EventEnd >= @startDate OR @startDate IS NULL))
            OR 
            (RecurrenceRule IS NOT NULL AND (FinalRecurringEndDate IS NULL OR FinalRecurringEndDate >= @startDate OR @startDate IS NULL))
          )
       AND (@hideFullEvents = 0 
            OR AllowRegistrations = 0 
            OR Capacity IS NULL 
            OR (@email IS NOT NULL AND EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}Engage_Response] r WHERE r.EventId = e.EventId AND r.EventStart = e.EventStart AND r.Status = @Attending AND r.Email = @email)) 
            OR Capacity > (SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}Engage_Response] r WHERE r.EventId = e.EventId AND r.EventStart = e.EventStart AND r.Status = @Attending))'

    IF @categoryIds IS NOT NULL
    BEGIN
        SET @sql = @sql + N'AND CategoryId IN (' + @categoryIds + N')'
    END

    EXEC sp_executesql @sql,
       N'@portalId int, @showAll bit, @featured bit, @startDate datetime, @endDate datetime, @hideFullEvents bit, @email nvarchar(50), @Attending nvarchar(20)',
       @portalId=@portalId, @showAll=@showAll, @featured=@featured, @startDate=@startDate, @endDate=@endDate, @hideFullEvents=@hideFullEvents, @email=@email, @Attending=@Attending
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spUpdateEvent]', N'P') IS NOT NULL
DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spUpdateEvent]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spUpdateEvent] (
    @EventId int,
    @Title nvarchar(500),
    @Overview ntext,
    @EventStart DateTime,
    @EventEnd DateTime,
    @TimeZone nvarchar(50),
    @Organizer nvarchar(100),
    @Description nText,
    @OrganizerEmail nvarchar(100),
    @Location nvarchar(1000),
    @LocationUrl nvarchar(1000),
    @InvitationUrl nvarchar(1000),
    @RecapUrl nvarchar(1000),
    @RecurrenceRule nvarchar(256),
    @RecurrenceParentId int,
    @AllowRegistrations bit,
    @Canceled bit,
    @IsFeatured bit,
    @RevisingUser int,
    @FinalRecurringEndDate datetime,
    @Capacity int,
    @CapacityMetMessage ntext,
    @CategoryId int,
    @IsDeleted bit)
AS
BEGIN

    UPDATE {databaseOwner}[{objectQualifier}Engage_Event] 
    SET [Title] = @Title, 
        [Overview] = @Overview, 
        [Description] = @Description,
        [EventStart] = @EventStart, 
        [EventEnd] = @EventEnd, 
        [TimeZone] = @TimeZone,
        [Organizer] = @Organizer, 
        [OrganizerEmail] = @OrganizerEmail,
        [Location] = @Location, 
        [LocationUrl] = @LocationUrl, 
        [InvitationUrl] = @InvitationUrl, 
        [RecapUrl] = @RecapUrl, 
        [RecurrenceRule] = @RecurrenceRule,
        [RecurrenceParentId] = @RecurrenceParentId, 
        [AllowRegistrations] = @AllowRegistrations, 
        [Canceled]  = @Canceled,
        [IsFeatured] = @IsFeatured,
        [RevisingUser] = @RevisingUser, 
        [RevisionDate] = GETDATE(),
        [FinalRecurringEndDate] = @FinalRecurringEndDate,
        [Capacity] = @Capacity,
        [CapacityMetMessage] = @CapacityMetMessage,
        [IsDeleted] = @IsDeleted,
        [CategoryId] = @CategoryId
    WHERE EventId = @EventId
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spInsertEvent]', N'P') IS NOT NULL
DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertEvent]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertEvent] (
    @PortalId int,
    @ModuleId int,
    @Title nvarchar(500),
    @Overview ntext,
    @Description nText,
    @EventStart DateTime,
    @EventEnd DateTime,
    @TimeZone nvarchar(50),
    @Organizer nvarchar(100),
    @OrganizerEmail nvarchar(100),
    @Location nvarchar(1000),
    @LocationUrl nvarchar(1000),
    @InvitationUrl nvarchar(1000),
    @RecapUrl nvarchar(1000),
    @RecurrenceRule nvarchar(256),
    @RecurrenceParentId int,
    @AllowRegistrations int,
    @IsFeatured bit,
    @CreatedBy int,
    @FinalRecurringEndDate datetime,
    @Capacity int,
    @CapacityMetMessage ntext,
    @CategoryId int,
    @IsDeleted bit = 0)
AS
BEGIN
    
    INSERT INTO {databaseOwner}[{objectQualifier}Engage_Event] 
    (
        [PortalId], [ModuleId], [Title], [Overview], [Description], [EventStart], [EventEnd], [TimeZone], [Organizer], [OrganizerEmail],
        [Location], [LocationUrl], [InvitationUrl], [RecapUrl], [RecurrenceRule], [AllowRegistrations], [IsFeatured], [CreatedBy], 
        [RevisingUser], [FinalRecurringEndDate], [IsDeleted], [RecurrenceParentId], [Capacity], [CapacityMetMessage], [CategoryId]
    )
    VALUES
    (
        @PortalId, @ModuleId, @Title, @Overview, @Description, @EventStart, @EventEnd, @TimeZone, @Organizer, @OrganizerEmail,
        @Location, @LocationUrl, @InvitationUrl,  @RecapUrl, @RecurrenceRule, @AllowRegistrations, @IsFeatured, @CreatedBy, 
        @CreatedBy, @FinalRecurringEndDate, @IsDeleted, @RecurrenceParentId, @Capacity, @CapacityMetMessage, @CategoryId
    )

    SELECT SCOPE_IDENTITY()

END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spGetEventTimeZoneOffsetsFor01_07_00Upgrade]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEventTimeZoneOffsetsFor01_07_00Upgrade]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEventTimeZoneOffsetsFor01_07_00Upgrade]
AS
BEGIN
    SELECT DISTINCT TimeZoneOffset
    FROM {databaseOwner}[{objectQualifier}Engage_Event]
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spConvertTimeZoneOffsetToTimeZoneFor01_07_00Upgrade]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spConvertTimeZoneOffsetToTimeZoneFor01_07_00Upgrade]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spConvertTimeZoneOffsetToTimeZoneFor01_07_00Upgrade] (
    @timeZoneOffset int,
    @timeZone nvarchar(50))
AS
BEGIN
    UPDATE {databaseOwner}[{objectQualifier}Engage_Event]
    SET TimeZone = @timeZone
    WHERE TimeZoneOffset = @timeZoneOffset
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spCleanup01_07_00Upgrade]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spCleanup01_07_00Upgrade]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spCleanup01_07_00Upgrade]
AS
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Event]
        DROP CONSTRAINT {objectQualifier}DF_Engage_Event_TimeZone,
             COLUMN TimeZoneOffset,
             COLUMN InDaylightTime;

    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEventTimeZoneOffsetsFor01_07_00Upgrade]
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spConvertTimeZoneOffsetToTimeZoneFor01_07_00Upgrade]
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spCleanup01_07_00Upgrade]
END
GO