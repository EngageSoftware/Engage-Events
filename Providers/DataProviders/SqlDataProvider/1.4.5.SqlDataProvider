IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spGetEvents]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvents]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvents](
    @portalId int, 
    @showAll bit,
    @featured bit,
    @hideFullEvents bit,
    @startDate datetime,
    @endDate datetime,
    @categoryIds nvarchar(4000)
)
AS
BEGIN
    DECLARE @sql nvarchar(4000), 
            @Attending nvarchar(20)
    SET @Attending = N'Attending'
    SET @sql = N'
     SELECT EventId, ModuleId, Title, Overview, EventStart, EventEnd, Organizer, OrganizerEmail, Location, 
            RecapUrl, InvitationUrl, AllowRegistrations, Canceled, CreatedBy, Description, IsDeleted, 
            IsFeatured, RecurrenceRule, RecurrenceParentId, TimeZoneOffset, InDaylightTime, Capacity, 
            CapacityMetMessage, CategoryId
     FROM  {databaseOwner}[{objectQualifier}Engage_Event] e
     WHERE PortalId = @portalId
       AND (@featured = 0 OR IsFeatured = @featured)
       AND (@showAll = 1 OR Canceled = @showAll)
       AND (EventStart <= @endDate OR @endDate IS NULL)
       AND (
            (RecurrenceRule IS NULL AND (EventEnd >= @startDate OR @startDate IS NULL))
            OR 
            (RecurrenceRule IS NOT NULL AND (FinalRecurringEndDate IS NULL OR FinalRecurringEndDate >= @startDate OR @startDate IS NULL))
          )
       AND (@hideFullEvents = 0 OR AllowRegistrations = 0 OR Capacity IS NULL OR Capacity > (SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}Engage_Response] r WHERE r.EventId = e.EventId AND r.EventStart = e.EventStart AND r.Status = @Attending))'

    IF @categoryIds IS NOT NULL
    BEGIN
        SET @sql = @sql + N'AND CategoryId IN (' + @categoryIds + N')'
    END

    EXEC sp_executesql @sql,
       N'@portalId int, @showAll bit, @featured bit, @startDate datetime, @endDate datetime, @categoryIds nvarchar(4000), @hideFullEvents bit, @Attending nvarchar(20)',
       @portalId=@portalId, @showAll=@showAll, @featured=@featured, @startDate=@startDate, @endDate=@endDate, @categoryIds=@categoryIds, @hideFullEvents=@hideFullEvents, @Attending=@Attending
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spDeleteEvent]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spDeleteEvent]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spDeleteEvent](
    @EventId int
)
AS
BEGIN TRANSACTION

DELETE {databaseOwner}[{objectQualifier}Engage_Response] 
WHERE EventID = @EventId

DELETE {databaseOwner}[{objectQualifier}Engage_Event] 
WHERE EventID = @EventId

COMMIT TRANSACTION
GO
