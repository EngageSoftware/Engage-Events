/**********************************************************************/
/*               Delete unused routing/framework tables               */
/**********************************************************************/
DELETE {databaseOwner}[{objectQualifier}Schedule] WHERE TypeFullName = 'Engage.Dnn.Events.Components.EmailScheduler'
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_EventMessage_Engage_Event]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_EventMessage] DROP CONSTRAINT [{objectQualifier}FK_Engage_EventMessage_Engage_Event] 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_Recurrence_Engage_RecurrenceType]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Recurrence] DROP CONSTRAINT [{objectQualifier}FK_Engage_Recurrence_Engage_RecurrenceType] 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_lkpClassType_Engage_lkpClass]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_lkpClass] DROP CONSTRAINT [{objectQualifier}FK_Engage_lkpClassType_Engage_lkpClass] 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_lkpClass_Engage_lkpRoutingEventType]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType] DROP CONSTRAINT [{objectQualifier}FK_Engage_lkpClass_Engage_lkpRoutingEventType] 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_RoutingEvent_Engage_EmailEvent]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_RoutingEvent] DROP CONSTRAINT [{objectQualifier}FK_Engage_RoutingEvent_Engage_EmailEvent]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_RoutingEvent_Engage_lkpRoutingEventType]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_RoutingEvent] DROP CONSTRAINT [{objectQualifier}FK_Engage_RoutingEvent_Engage_lkpRoutingEventType]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_RoutingTransaction_Engage_RoutingEvent]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_RoutingTransaction] DROP CONSTRAINT [{objectQualifier}FK_Engage_RoutingTransaction_Engage_RoutingEvent]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_RoutingTransactionDetail_Engage_RoutingTransaction]') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_RoutingTransactionDetail] DROP CONSTRAINT [{objectQualifier}FK_Engage_RoutingTransactionDetail_Engage_RoutingTransaction]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}PK_Engage_Approval]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Approval] DROP CONSTRAINT [{objectQualifier}PK_Engage_Approval] 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_RoutingEvent_Engage_Approval]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Approval] DROP CONSTRAINT [{objectQualifier}FK_Engage_RoutingEvent_Engage_Approval]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_lkpRoutingEventType]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_RoutingTransaction]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_RoutingTransaction]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_RecurrenceType]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_RecurrenceType]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_Recurrence]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_Recurrence]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_RoutingTransactionDetail]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_RoutingTransactionDetail]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_Contact]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_Contact]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_EventMessage]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_EventMessage]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_lkpClassType]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_lkpClassType]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_lkpClass]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_lkpClass]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_Approval]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_Approval]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_EmailEvent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_EmailEvent]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_RoutingEvent]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Engage_RoutingEvent]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertEmailEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertEmailEvent]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertRoutingEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertRoutingEvent]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetPendingTransactions]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetPendingTransactions]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEmailEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetEmailEvent]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spCompleteTransaction]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spCompleteTransaction]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertTransactionDetail]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertTransactionDetail]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spDeleteTransactionDetails]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spDeleteTransactionDetails]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetTransactionDetails]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetTransactionDetails]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetUndeliverable]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spGetUndeliverable]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertRoutingTransaction]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertRoutingTransaction]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spWriteMessageId]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spWriteMessageId]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertApproval]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertApproval]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spDeleteEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spDeleteEvent]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spDeleteEvent] (@EventId int)
AS

BEGIN TRANSACTION

DELETE {databaseOwner}[{objectQualifier}Engage_Rsvp] 
WHERE EventID = @EventId

DELETE {databaseOwner}[{objectQualifier}Engage_Event] 
WHERE EventID = @EventId

COMMIT TRANSACTION

GO

/**********************************************************************/
/*                      Add categories to events                      */
/**********************************************************************/
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Engage_EventCategory', N'U') IS NULL
CREATE TABLE {databaseOwner}{objectQualifier}Engage_EventCategory
    (
    CategoryId int NOT NULL IDENTITY (1, 1),
    PortalId int NOT NULL,
    Name nvarchar(250) NOT NULL,
    CreatedBy int NOT NULL,
    CreationDate datetime NOT NULL DEFAULT GETDATE(),
    RevisingUser int NOT NULL,
    RevisionDate datetime NOT NULL DEFAULT GETDATE(),
    CONSTRAINT {objectQualifier}PK_Engage_EventCategory PRIMARY KEY CLUSTERED (CategoryId),
    CONSTRAINT {objectQualifier}IX_Engage_EventCategory_Name UNIQUE (PortalId, Name)
    )
GO

IF NOT EXISTS (SELECT NULL FROM syscolumns WHERE name = 'CategoryId' AND id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Event]', N'U'))
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Event] 
        ADD CategoryId int NULL 
            CONSTRAINT {objectQualifier}FK_Engage_EventCategory_Engage_Event FOREIGN KEY (CategoryId) REFERENCES {databaseOwner}[{objectQualifier}Engage_EventCategory] (CategoryId)

    INSERT INTO {databaseOwner}{objectQualifier}Engage_EventCategory (Name, PortalId, CreatedBy, RevisingUser)
    SELECT '', PortalId, -1, -1
    FROM {databaseOwner}[{objectQualifier}Engage_Event]
    GROUP BY PortalId

    EXEC sp_executesql N'UPDATE {databaseOwner}[{objectQualifier}Engage_Event]
                         SET CategoryId = c.CategoryId
                         FROM {databaseOwner}[{objectQualifier}Engage_Event] e
                         JOIN {databaseOwner}[{objectQualifier}Engage_EventCategory] c ON (e.PortalId = c.PortalId)'

    ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Event] 
        ALTER COLUMN CategoryId int NOT NULL
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Engage_spGetEventCategory', N'P') IS NOT NULL
DROP PROCEDURE {databaseOwner}{objectQualifier}Engage_spGetEventCategory
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Engage_spGetEventCategory (@CategoryId int)
AS
    SELECT CategoryId, Name, (
        SELECT COUNT(*)
        FROM {databaseOwner}{objectQualifier}Engage_Event e
        WHERE e.CategoryId = c.CategoryId
        ) AS EventCount
    FROM {databaseOwner}{objectQualifier}Engage_EventCategory c
    WHERE CategoryId = @CategoryId
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Engage_spDeleteEventCategory', N'P') IS NOT NULL
DROP PROCEDURE {databaseOwner}{objectQualifier}Engage_spDeleteEventCategory
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Engage_spDeleteEventCategory (@CategoryId int)
AS
    DELETE {databaseOwner}[{objectQualifier}Engage_Event] 
    WHERE CategoryId = @CategoryId

    DELETE {databaseOwner}{objectQualifier}Engage_EventCategory
    WHERE CategoryId = @CategoryId
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Engage_spInsertEventCategory', N'P') IS NOT NULL
DROP PROCEDURE {databaseOwner}{objectQualifier}Engage_spInsertEventCategory
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Engage_spInsertEventCategory (@PortalId int, @Name nvarchar(250), @CreatedBy int)
AS
    INSERT INTO {databaseOwner}{objectQualifier}Engage_EventCategory (PortalId, Name, CreatedBy, RevisingUser)
    VALUES (@PortalId, @Name, @CreatedBy, @CreatedBy)
    
    SELECT SCOPE_IDENTITY()  
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Engage_spUpdateEventCategory', N'P') IS NOT NULL
DROP PROCEDURE {databaseOwner}{objectQualifier}Engage_spUpdateEventCategory
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Engage_spUpdateEventCategory (@CategoryId int, @Name nvarchar(250), @RevisingUser int)
AS
    UPDATE {databaseOwner}{objectQualifier}Engage_EventCategory 
    SET Name = @Name, 
        RevisingUser = @RevisingUser,
        RevisionDate = GETDATE()
    WHERE CategoryId = @CategoryId
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Engage_spGetEventCategories', N'P') IS NOT NULL
DROP PROCEDURE {databaseOwner}{objectQualifier}Engage_spGetEventCategories
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Engage_spGetEventCategories (@PortalId int)
AS
    SELECT CategoryId, Name, (
        SELECT COUNT(*)
        FROM {databaseOwner}{objectQualifier}Engage_Event e
        WHERE e.CategoryId = c.CategoryId
        ) AS EventCount
    FROM {databaseOwner}{objectQualifier}Engage_EventCategory c
    WHERE PortalId = @PortalId
    ORDER BY Name
GO

if OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spInsertEvent]', N'P') IS NOT NULL
DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertEvent]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertEvent] 
(
@PortalId int,
@ModuleId int,
@Title nvarchar(500),
@Overview ntext,
@Description nText,
@EventStart DateTime,
@EventEnd DateTime,
@TimeZoneOffset int,
@Organizer nvarchar(100),
@OrganizerEmail nvarchar(100),
@Location nvarchar(1000),
@LocationUrl nvarchar(1000),
@InvitationUrl nvarchar(1000),
@RecapUrl nvarchar(1000),
@RecurrenceRule nvarchar(256),
@RecurrenceParentId int,
@AllowRegistrations int,
@IsFeatured bit,
@CreatedBy int,
@FinalRecurringEndDate datetime,
@Capacity int,
@InDaylightTime bit,
@CapacityMetMessage ntext,
@CategoryId int,
@IsDeleted bit = 0
)
AS
BEGIN
    
    INSERT INTO {databaseOwner}[{objectQualifier}Engage_Event] 
    (
        [PortalId], [ModuleId], [Title], [Overview], [Description], [EventStart], [EventEnd], [TimeZoneOffset], [Organizer], [OrganizerEmail],
        [Location], [LocationUrl], [InvitationUrl], [RecapUrl], [RecurrenceRule], [AllowRegistrations], [IsFeatured], [CreatedBy], 
        [RevisingUser], [FinalRecurringEndDate], [IsDeleted], [RecurrenceParentId], [Capacity], [InDaylightTime], [CapacityMetMessage], [CategoryId]
    )
    VALUES
    (
        @PortalId, @ModuleId, @Title, @Overview, @Description, @EventStart, @EventEnd, @TimeZoneOffset, @Organizer, @OrganizerEmail,
        @Location, @LocationUrl, @InvitationUrl,  @RecapUrl, @RecurrenceRule, @AllowRegistrations, @IsFeatured, @CreatedBy, 
        @CreatedBy, @FinalRecurringEndDate, @IsDeleted, @RecurrenceParentId, @Capacity, @InDaylightTime, @CapacityMetMessage, @CategoryId
    )

    SELECT SCOPE_IDENTITY()

END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spUpdateEvent]', N'P') IS NOT NULL
DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spUpdateEvent]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spUpdateEvent] 
(
@EventId int,
@Title nvarchar(500),
@Overview ntext,
@EventStart DateTime,
@EventEnd DateTime,
@TimeZoneOffset int,
@Organizer nvarchar(100),
@Description nText,
@OrganizerEmail nvarchar(100),
@Location nvarchar(1000),
@LocationUrl nvarchar(1000),
@InvitationUrl nvarchar(1000),
@RecapUrl nvarchar(1000),
@RecurrenceRule nvarchar(256),
@RecurrenceParentId int,
@AllowRegistrations bit,
@Canceled bit,
@IsFeatured bit,
@RevisingUser int,
@FinalRecurringEndDate datetime,
@Capacity int,
@InDaylightTime bit,
@CapacityMetMessage ntext,
@CategoryId int,
@IsDeleted bit
)
AS
BEGIN

    UPDATE {databaseOwner}[{objectQualifier}Engage_Event] 
    SET [Title] = @Title, 
        [Overview] = @Overview, 
        [Description] = @Description,
        [EventStart] = @EventStart, 
        [EventEnd] = @EventEnd, 
        [TimeZoneOffset] = @TimeZoneOffset,
        [Organizer] = @Organizer, 
        [OrganizerEmail] = @OrganizerEmail,
        [Location] = @Location, 
        [LocationUrl] = @LocationUrl, 
        [InvitationUrl] = @InvitationUrl, 
        [RecapUrl] = @RecapUrl, 
        [RecurrenceRule] = @RecurrenceRule,
        [RecurrenceParentId] = @RecurrenceParentId, 
        [AllowRegistrations] = @AllowRegistrations, 
        [Canceled]  = @Canceled,
        [IsFeatured] = @IsFeatured,
        [RevisingUser] = @RevisingUser, 
        [RevisionDate] = GETDATE(),
        [FinalRecurringEndDate] = @FinalRecurringEndDate,
        [Capacity] = @Capacity,
        [InDaylightTime] = @InDaylightTime,
        [CapacityMetMessage] = @CapacityMetMessage,
        [IsDeleted] = @IsDeleted,
        [CategoryId] = @CategoryId
    WHERE EventId = @EventId
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spGetEvents]', N'P') IS NOT NULL
  DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvents]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvents](
    @portalId int, 
    @showAll bit,
    @featured bit,
    @startDate datetime,
    @endDate datetime,
    @categoryIds nvarchar(4000)
)
AS
BEGIN
    DECLARE @sql nvarchar(4000)
    SET @sql = N'
     SELECT EventId, ModuleId, Title, Overview, EventStart, EventEnd, Organizer, OrganizerEmail, Location, 
            RecapUrl, InvitationUrl, AllowRegistrations, Canceled, CreatedBy, Description, IsDeleted, 
            IsFeatured, RecurrenceRule, RecurrenceParentId, TimeZoneOffset, InDaylightTime, Capacity, 
            CapacityMetMessage, CategoryId
     FROM  {databaseOwner}[{objectQualifier}Engage_Event]
     WHERE PortalId = @portalId
       AND (@featured = 0 OR IsFeatured = @featured)
       AND (@showAll = 1 OR Canceled = @showAll)
       AND (EventStart <= @endDate OR @endDate IS NULL)
       AND (
            (RecurrenceRule IS NULL AND (EventEnd >= @startDate OR @startDate IS NULL))
            OR 
            (RecurrenceRule IS NOT NULL AND (FinalRecurringEndDate IS NULL OR FinalRecurringEndDate >= @startDate OR @startDate IS NULL))
          )'

    IF @categoryIds IS NOT NULL
    BEGIN
        SET @sql = @sql + N'AND CategoryId IN (' + @categoryIds + N')'
    END

    EXEC sp_executesql @sql,
       N'@portalId int, @showAll bit, @featured bit, @startDate datetime, @endDate datetime, @categoryIds nvarchar(4000)',
       @portalId=@portalId, @showAll=@showAll, @featured=@featured, @startDate=@startDate, @endDate=@endDate, @categoryIds=@categoryIds
END
GO


IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spGetResponseSummaries]', N'P') IS NOT NULL
DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetResponseSummaries]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetResponseSummaries](  
    @PortalId int,  
    @sortColumn nvarchar(200),   
    @index int,   
    @pageSize int,
    @categoryIds nvarchar(4000) 
)  
AS  
BEGIN  
  
CREATE TABLE #results (  
    [Id] int NOT NULL IDENTITY(1,1),  
    [EventId] int,  
    [EventStart] datetime,
    [Title] [nvarchar] (100),  
    [Attending] int,  
    [NotAttending] int,  
    [NoResponse] int
)  
  
  
DECLARE @sql nvarchar(4000), @Attending nvarchar(20), @NotAttending nvarchar(20), @NoResponse nvarchar(20)  
SELECT @Attending = N'Attending'  
SELECT @NotAttending = N'NotAttending'  
SELECT @NoResponse = N'NoResponse' 
 
IF @sortColumn = 'EventStart' 
BEGIN
    SET @sortColumn = 'COALESCE(r.EventStart, e.EventStart)'
END 
  
SET @sql = N'
    INSERT INTO #results ([EventId], [EventStart], [Title], [Attending], [NotAttending], [NoResponse]) 
    SELECT DISTINCT e.EventId, COALESCE(r.EventStart, e.EventStart), e.Title, 
    (SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}Engage_Response] WHERE EventId = e.EventId AND EventStart = r.EventStart AND Status = @Attending), 
    (SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}Engage_Response] WHERE EventId = e.EventId AND EventStart = r.EventStart AND Status = @NotAttending), 
    (SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}Engage_Response] WHERE EventId = e.EventId AND EventStart = r.EventStart AND Status = @NoResponse) 
    FROM {databaseOwner}[{objectQualifier}Engage_Event] e 
    LEFT JOIN {databaseOwner}[{objectQualifier}Engage_Response] r ON (r.EventID = e.EventId) 
    WHERE e.PortalId = @PortalId '

IF @categoryIds IS NOT NULL
BEGIN
    SET @sql = @sql + N' AND e.CategoryId IN (' + @categoryIds + N') '
END

SET @sql = @sql + N' ORDER BY ' + @sortColumn
  
--PRINT (@sql)  
EXEC sp_executesql @sql, 
    N'@Attending nvarchar(20), @NotAttending nvarchar(20), @NoResponse nvarchar(20), @PortalId int',
    @Attending=@Attending, @NotAttending=@NotAttending, @NoResponse=@NoResponse, @PortalId=@PortalId
  
SELECT @@RowCount AS TotalRecords
  
IF (@PageSize = 0)  
    BEGIN  
        SELECT * FROM #results
    END  
ELSE  
    BEGIN  
        SELECT * FROM #results  
        WHERE (id >= @index * @PageSize + 1) AND id < (@index * @PageSize) + @PageSize + 1  
    END  
END  
GO

if OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_spGetResponses]', N'P') IS NOT NULL
DROP PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetResponses]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetResponses] (
    @EventId int,
    @EventStart datetime,
    @Status nvarchar(100),
    @sortColumn nvarchar(200), 
    @index int, 
    @pageSize int
)
AS
BEGIN

CREATE TABLE #results (
[Id] int NOT NULL IDENTITY(1,1),
[ResponseId] [int]
)
    
DECLARE @sql nvarchar(4000)

SET @sql = N'
    INSERT INTO #results ([ResponseId]) 
    SELECT [ResponseId] 
    FROM {databaseOwner}[{objectQualifier}Engage_Response] r
    WHERE r.EventId = @EventId
      AND r.EventStart = @EventStart
      AND (r.Status = @Status OR @Status = '''')
	ORDER BY ' + @sortColumn

--PRINT (@sql)
EXEC sp_executesql @sql,
    N'@EventId int,	@EventStart datetime, @Status nvarchar(100)',
    @EventId=@EventId,@EventStart=@EventStart,@Status=@Status

SELECT @@RowCount AS TotalRecords

IF (@PageSize = 0)
    BEGIN
        SELECT e.* FROM #results r
        JOIN {databaseOwner}[{objectQualifier}Engage_Response] e ON (r.ResponseId = e.ResponseId)
    END
ELSE
    BEGIN
        SELECT e.* FROM #results r
        JOIN {databaseOwner}[{objectQualifier}Engage_Response] e ON (r.ResponseId = e.ResponseId)
        WHERE (id >= @index * @PageSize + 1) AND id < (@index * @PageSize) + @PageSize + 1
    END
END
GO
