IF NOT EXISTS (SELECT * FROM dbo.syscolumns where id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Event]') and name = 'IsDeleted')
ALTER TABLE  {databaseOwner}[{objectQualifier}Engage_Event] ADD IsDeleted BIT NOT NULL DEFAULT 0
GO
IF NOT EXISTS (SELECT * FROM dbo.syscolumns where id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Event]') and name = 'FinalRecurringEndDate')
ALTER TABLE  {databaseOwner}[{objectQualifier}Engage_Event] ADD FinalRecurringEndDate DATETIME NULL
GO
IF NOT EXISTS (SELECT * FROM dbo.syscolumns where id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Event]') and name = 'IsFeatured')
ALTER TABLE  {databaseOwner}[{objectQualifier}Engage_Event] ADD IsFeatured BIT NOT NULL Default 0
GO
IF NOT EXISTS (SELECT * FROM dbo.syscolumns where id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Event]') and name = 'RecurrenceRule')
ALTER TABLE  {databaseOwner}[{objectQualifier}Engage_Event] ADD RecurrenceRule nvarchar(256) null
GO
IF NOT EXISTS (SELECT * FROM dbo.syscolumns where id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Event]') and name = 'RecurrenceParentId')
ALTER TABLE  {databaseOwner}[{objectQualifier}Engage_Event] ADD RecurrenceParentId int null
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Event]
 ALTER COLUMN EventEnd DATETIME NOT NULL
GO

--get rid of some not needed stuff
if exists (select * from dbo.sysobjects where id = object_id(N'[{objectQualifier}FK_Engage_Recurrence_Engage_RecurrenceType]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Engage_Recurrence] DROP CONSTRAINT [{objectQualifier}FK_Engage_Recurrence_Engage_RecurrenceType] 
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Recurrence]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
DROP TABLE {databaseOwner}[{objectQualifier}Engage_Recurrence]
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_RecurrenceType]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
DROP TABLE {databaseOwner}[{objectQualifier}Engage_RecurrenceType]
GO
IF EXISTS (SELECT * FROM dbo.syscolumns where id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Event]') and name = 'RecurrenceId')
ALTER TABLE  {databaseOwner}[{objectQualifier}Engage_Event] DROP COLUMN RecurrenceId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = Object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEventsCurrent]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
  DROP PROC {databaseOwner}[{objectQualifier}Engage_spGetEventsCurrent] 
GO
IF EXISTS (SELECT * FROM   dbo.sysobjects WHERE  id = Object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEventsFuture]') AND Objectproperty(id,N'IsProcedure') = 1)
  DROP PROC {databaseOwner}[{objectQualifier}Engage_spGetEventsFuture] 
GO
IF EXISTS (SELECT * FROM   dbo.sysobjects WHERE  id = Object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEventsPast]') AND Objectproperty(id,N'IsProcedure') = 1)
  DROP PROC {databaseOwner}[{objectQualifier}Engage_spGetEventsPast] 
GO

IF EXISTS (SELECT * FROM   dbo.sysobjects WHERE  id = Object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEvents]') AND Objectproperty(id,N'IsProcedure') = 1)
  DROP PROC {databaseOwner}[{objectQualifier}Engage_spGetEvents] 
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvents](
	@portalId int, 
	@showAll bit,
	@featured bit,
	@startDate datetime,
	@endDate datetime
)
AS
BEGIN
	 SELECT *
	 FROM   {databaseOwner}[{objectQualifier}Engage_Event]
	 WHERE  PortalId = @portalId
	  AND (@featured = 0 OR IsFeatured = @featured)
	  AND (@showAll = 1 OR Cancelled = @showAll)
	  AND (EventStart <= @endDate OR @endDate IS NULL)
	  AND (
			(RecurrenceRule IS NULL AND (EventEnd >= @startDate OR @startDate IS NULL))
			OR 
			(RecurrenceRule IS NOT NULL AND (FinalRecurringEndDate IS NULL OR FinalRecurringEndDate >= @startDate))
		  )

	SELECT @@ROWCOUNT AS TotalRecords
END
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertEvent]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertEvent] 
(
@PortalId int,
@ModuleId int,
@Title nvarchar(500),
@Overview ntext,
@Description nText,
@EventStart DateTime,
@EventEnd DateTime,
@Organizer nvarchar(100),
@OrganizerEmail nvarchar(100),
@Location nvarchar(1000),
@LocationUrl nvarchar(1000),
@InvitationUrl nvarchar(1000),
@RecapUrl nvarchar(1000),
@RecurrenceRule nvarchar(256),
@RecurrenceParentId int,
@CanRsvp int,
@IsFeatured bit,
@CreatedBy int,
@FinalRecurringEndDate datetime,
@IsDeleted bit = 0
)
AS
BEGIN
	
	Insert into {databaseOwner}[{objectQualifier}Engage_Event] 
	(
		[PortalId], [ModuleId], [Title], [Overview], [Description], [EventStart], [EventEnd], [Organizer], [OrganizerEmail],
		[Location], [LocationUrl], [InvitationUrl], [RecapUrl], [RecurrenceRule], [CanRsvp], [IsFeatured], [CreatedBy], 
		[RevisingUser], [FinalRecurringEndDate], [IsDeleted], [RecurrenceParentId]
	)
	Values
	(
		@PortalId, @ModuleId, @Title, @Overview, @Description, @EventStart, @EventEnd, @Organizer, @OrganizerEmail,
		@Location, @LocationUrl, @InvitationUrl,  @RecapUrl, @RecurrenceRule, @CanRsvp, @IsFeatured, @CreatedBy, 
		@CreatedBy, @FinalRecurringEndDate, @IsDeleted, @RecurrenceParentId
	)

	SELECT @@Identity

END
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spUpdateEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spUpdateEvent]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spUpdateEvent] 
(
@EventId int,
@Title nvarchar(500),
@Overview ntext,
@EventStart DateTime,
@EventEnd DateTime,
@Organizer nvarchar(100),
@Description nText,
@OrganizerEmail nvarchar(100),
@Location nvarchar(1000),
@LocationUrl nvarchar(1000),
@InvitationUrl nvarchar(1000),
@RecapUrl nvarchar(1000),
@RecurrenceRule nvarchar(256),
@RecurrenceParentId int,
@CanRsvp bit,
@Cancelled bit,
@IsFeatured bit,
@RevisingUser int,
@FinalRecurringEndDate datetime,
@IsDeleted bit
)
AS
BEGIN

	UPDATE {databaseOwner}[{objectQualifier}Engage_Event] 
	SET [Title] = @Title, 
		[Overview] = @Overview, 
		[Description] = @Description,
		[EventStart] = @EventStart, 
		[EventEnd] = @EventEnd, 
		[Organizer] = @Organizer, 
		[OrganizerEmail] = @OrganizerEmail,
		[Location] = @Location, 
		[LocationUrl] = @LocationUrl, 
		[InvitationUrl] = @InvitationUrl, 
		[RecapUrl] = @RecapUrl, 
		[RecurrenceRule] = @RecurrenceRule,
		[RecurrenceParentId] = @RecurrenceParentId, 
		[CanRsvp] = @CanRsvp, 
		[Cancelled]  = @Cancelled,
		[IsFeatured] = @IsFeatured,
		[RevisingUser] = @RevisingUser, 
		[RevisionDate] = GETDATE(),
		[FinalRecurringEndDate] = @FinalRecurringEndDate,
		[IsDeleted] = IsDeleted
	WHERE EventId = @EventId
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetRsvpSummaries]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROC {databaseOwner}[{objectQualifier}Engage_spGetRsvpSummaries]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetRsvpSummaries]  
(  
@PortalId int,  
@sortColumn nvarchar(200),   
@index int,   
@pageSize int  
)  
AS  
BEGIN  
  
 Create table #results   
 (  
  [Id] int not null IDENTITY(1,1),  
  [EventId] [int],  
  [Title] [nvarchar] (100),  
  [EventStart] datetime,  
  [Attending] int,  
  [NotAttending] int,  
  [NoResponse] int
 )  
  
  
 declare @sql varchar(8000)  
 declare @Attending nvarchar(20), @NotAttending nvarchar(20), @NoResponse nvarchar(20)  
 select @Attending = 'Attending'  
 select @NotAttending = 'NotAttending'  
 select @NoResponse = 'NoResponse'  
  
 set @sql = 'insert into #results ([EventId], [Title], [EventStart], [Attending], [NotAttending], [NoResponse]) '  
 set @sql = @sql + 'Select distinct e.EventId, e.Title, e.EventStart, '  
 set @sql = @sql + '(Select Count(*) from [{objectQualifier}Engage_Rsvp] where EventId = e.EventId and Status = ''' + @Attending + ''' ), '  
 set @sql = @sql + '(Select Count(*) from [{objectQualifier}Engage_Rsvp] where EventId = e.EventId and Status = ''' + @NotAttending + '''), '  
 set @sql = @sql + '(Select Count(*) from [{objectQualifier}Engage_Rsvp] where EventId = e.EventId and Status = ''' + @NoResponse + ''') '  
 set @sql = @sql + ' FROM {databaseOwner}[{objectQualifier}Engage_Event] e '  
 set @sql = @sql + ' LEFT JOIN {databaseOwner}[{objectQualifier}Engage_Rsvp] r ON (r.EventID = e.EventId) '  
 set @sql = @sql + ' WHERE e.PortalId = ' + str(@PortalId)  
 set @sql = @sql + ' Order by ' + @sortColumn  
  
 print (@sql)  
 exec (@sql)  
  
 SELECT @@RowCount AS TotalRecords
  
 if (@PageSize = 0)  
   BEGIN  
    select * from #results
   END  
 ELSE  
   BEGIN  
    select * from #results  
    where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1  
   END  
END  
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spDeleteEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spDeleteEvent]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spDeleteEvent] 
(
@EventId int
)
AS

begin transaction

DELETE {databaseOwner}[{objectQualifier}Engage_EventMessage] 
WHERE EventID = @EventId

DELETE {databaseOwner}[{objectQualifier}Engage_Rsvp] 
WHERE EventID = @EventId

DELETE {databaseOwner}[{objectQualifier}Engage_Event] 
WHERE EventID = @EventId OR RecurrenceParentId = @EventId

commit transaction
GO

