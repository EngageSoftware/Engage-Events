
IF NOT EXISTS (SELECT * FROM dbo.syscolumns where id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Engage_Event]') and name = 'Description')
ALTER TABLE  {databaseOwner}[{objectQualifier}Engage_Event] ADD Description nText null
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = Object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEventsCurrent]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
  DROP PROC {databaseOwner}[{objectQualifier}Engage_spGetEventsCurrent] 
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEventsCurrent](
	@portalId int, 
	@sortColumn nvarchar(200),
	@index int, 
	@pageSize int,
	@showAll bit)
AS 
BEGIN	
	CREATE TABLE #results 
	(
		[Id] INT NOT NULL IDENTITY(1,1),
		[EventId] INT
	)

if (@ShowAll =0)
BEGIN
	INSERT INTO #results ([EventId])
	SELECT [EventId] FROM Engage_Event
	WHERE PortalId = @portalId
	AND EventStart < DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, 0) --first day of the next month
	AND Cancelled = 0 
	AND EventStart >= GETDATE() 
END
ELSE
BEGIN
	INSERT INTO #results ([EventId])
	SELECT [EventId] FROM Engage_Event
	WHERE PortalId = @portalId
	AND EventStart < DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, 0) --first day of the next month
END

SELECT @@ROWCOUNT AS TotalRecords

DECLARE @sql VARCHAR(8000)
SET @sql = 'SELECT e.* FROM #results r '
SET @sql = @sql + 'JOIN {databaseOwner}[{objectQualifier}Engage_Event] e ON (r.EventId = e.EventId) '
IF (@PageSize != 0)
 	BEGIN
 		SET @sql = @sql + 'WHERE (id >= ' + str(@index) + ' * ' + str(@PageSize) + ' + 1) AND id < (' + str(@index) + ' * ' + str(@PageSize) + ') + ' + str(@PageSize) + ' + 1 '
 	END
SET @sql = @sql + 'ORDER BY ' + @sortColumn

EXEC (@sql)	
end
GO


IF EXISTS (SELECT * FROM   dbo.sysobjects WHERE  id = Object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEventsFuture]') AND Objectproperty(id,N'IsProcedure') = 1)
  DROP PROC {databaseOwner}[{objectQualifier}Engage_spGetEventsFuture] 
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEventsFuture](
@portalId int, 
	@sortColumn nvarchar(200),
	@index int, 
	@pageSize int,
	@showAll bit)
AS 
BEGIN	
	CREATE TABLE #results (
		[Id]			INT	NOT NULL	IDENTITY(1,1),
		[EventId]		INT)

if (@ShowAll = 0)
BEGIN
	INSERT INTO #results ([EventId])
	SELECT [EventId] FROM {databaseOwner}[{objectQualifier}Engage_Event]
	WHERE PortalId = @portalId
	AND EventStart >= DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, 0) --first day of the next month
	AND Cancelled = 0 
	AND EventStart >= GETDATE()	
END
ELSE
BEGIN
	INSERT INTO #results ([EventId])
	SELECT [EventId] FROM {databaseOwner}[{objectQualifier}Engage_Event]
	WHERE PortalId = @portalId
	AND EventStart >= DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) + 1, 0) --first day of the next month
END

SELECT @@ROWCOUNT AS TotalRecords

DECLARE @sql VARCHAR(8000)
SET @sql = 'SELECT e.* FROM #results r '
SET @sql = @sql + 'JOIN {databaseOwner}[{objectQualifier}Engage_Event] e ON (r.EventId = e.EventId) '
IF (@PageSize != 0)
 	BEGIN
 		SET @sql = @sql + 'WHERE (id >= ' + str(@index) + ' * ' + str(@PageSize) + ' + 1) AND id < (' + str(@index) + ' * ' + str(@PageSize) + ') + ' + str(@PageSize) + ' + 1 '
 	END
SET @sql = @sql + 'ORDER BY ' + @sortColumn

EXEC (@sql)	
end

GO

IF EXISTS (SELECT * FROM   dbo.sysobjects WHERE  id = Object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEvents]') AND Objectproperty(id,N'IsProcedure') = 1)
  DROP PROC {databaseOwner}[{objectQualifier}Engage_spGetEvents] 
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEvents](
	@portalId int, 
	@sortColumn nvarchar(200), 
	@index int, 
	@pageSize int, 
	@showAll bit)
AS
BEGIN

	CREATE TABLE #results 
	(
		[Id] INT NOT NULL IDENTITY(1,1),
		[EventId] INT
	)

	IF (@showAll = 0)
	BEGIN
		INSERT INTO #results ([EventId])
		SELECT [EventId]
		FROM   {databaseOwner}[{objectQualifier}Engage_Event]
		WHERE  PortalId = @portalId
		AND Cancelled = 0 
		AND EventStart >= GETDATE() 
	END
	ELSE
	BEGIN
		INSERT INTO #results ([EventId])
		SELECT [EventId]
		FROM   {databaseOwner}[{objectQualifier}Engage_Event]
		WHERE  PortalId = @portalId
	END
	
	SELECT @@ROWCOUNT AS TotalRecords

	DECLARE @sql VARCHAR(8000)
	SET @sql = 'SELECT e.* FROM #results r '
	SET @sql = @sql + 'JOIN {databaseOwner}[{objectQualifier}Engage_Event] e ON (r.EventId = e.EventId) '
	IF (@PageSize != 0)
 	BEGIN
 		SET @sql = @sql + 'WHERE (id >= ' + str(@index) + ' * ' + str(@PageSize) + ' + 1) AND id < (' + str(@index) + ' * ' + str(@PageSize) + ') + ' + str(@PageSize) + ' + 1 '
 	END
	SET @sql = @sql + 'ORDER BY ' + @sortColumn
	
	EXEC (@sql)	
END

GO


IF EXISTS (SELECT * FROM   dbo.sysobjects WHERE  id = Object_id(N'{databaseOwner}[{objectQualifier}Engage_spGetEventsPast]') AND Objectproperty(id,N'IsProcedure') = 1)
  DROP PROC {databaseOwner}[{objectQualifier}Engage_spGetEventsPast] 
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spGetEventsPast](
	@portalId int, 
	@sortColumn nvarchar(200), 
	@index int, 
	@pageSize int, 
	@showAll bit)
AS
BEGIN

	CREATE TABLE #results 
	(
		[Id] INT NOT NULL IDENTITY(1,1),
		[EventId] INT
	)

	IF (@showAll = 0)
	BEGIN
		INSERT INTO #results ([EventId])
		SELECT [EventId]
		FROM   {databaseOwner}[{objectQualifier}Engage_Event]
		WHERE  PortalId = @portalId
		AND Cancelled = 0 
		AND EventStart < GETDATE() 
	END
	ELSE
	BEGIN
		INSERT INTO #results ([EventId])
		SELECT [EventId]
		FROM   {databaseOwner}[{objectQualifier}Engage_Event]
		WHERE  PortalId = @portalId
		AND EventStart < GETDATE() 		
	END
	
	SELECT @@ROWCOUNT AS TotalRecords

	DECLARE @sql VARCHAR(8000)
	SET @sql = 'SELECT e.* FROM #results r '
	SET @sql = @sql + 'JOIN {databaseOwner}[{objectQualifier}Engage_Event] e ON (r.EventId = e.EventId) '
	IF (@PageSize != 0)
 	BEGIN
 		SET @sql = @sql + 'WHERE (id >= ' + str(@index) + ' * ' + str(@PageSize) + ' + 1) AND id < (' + str(@index) + ' * ' + str(@PageSize) + ') + ' + str(@PageSize) + ' + 1 '
 	END
	SET @sql = @sql + 'ORDER BY ' + @sortColumn
	
	EXEC (@sql)	
END

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spInsertEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spInsertEvent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spInsertEvent] 
(
@PortalId int,
@ModuleId int,
@Title nvarchar(500),
@Overview ntext,
@Description nText,
@EventStart DateTime,
@EventEnd DateTime,
@Organizer nvarchar(100),
@OrganizerEmail nvarchar(100),
@Location nvarchar(1000),
@LocationUrl nvarchar(1000),
@InvitationUrl nvarchar(1000),
@RecapUrl nvarchar(1000),
@RecurrenceId int,
@CanRsvp int,
@CreatedBy int
)
AS
BEGIN
	
	if (@RecurrenceId < 0)
	begin
		set @RecurrenceId = null
	end
	
	Insert into {databaseOwner}[{objectQualifier}Engage_Event] 
	(
		[PortalId], [ModuleId], [Title], [Overview], [Description], [EventStart], [EventEnd], [Organizer], [OrganizerEmail],
		[Location], [LocationUrl], [InvitationUrl], [RecapUrl], [RecurrenceId], [CanRsvp], [CreatedBy], [RevisingUser]
	)
	Values
	(
		@PortalId, @ModuleId, @Title, @Overview, @Description, @EventStart, @EventEnd, @Organizer, @OrganizerEmail,
		@Location, @LocationUrl, @InvitationUrl,  @RecapUrl, @RecurrenceId, @CanRsvp, @CreatedBy, @CreatedBy
	)

	SELECT @@Identity

END
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Engage_spUpdateEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Engage_spUpdateEvent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Engage_spUpdateEvent] 
(
@EventId int,
@Title nvarchar(500),
@Overview ntext,
@EventStart DateTime,
@EventEnd DateTime,
@Organizer nvarchar(100),
@Description nText,
@OrganizerEmail nvarchar(100),
@Location nvarchar(1000),
@LocationUrl nvarchar(1000),
@InvitationUrl nvarchar(1000),
@RecapUrl nvarchar(1000),
@RecurrenceId int,
@CanRsvp bit,
@Cancelled bit,
@RevisingUser int
)
AS
BEGIN
	
	if (@RecurrenceId < 0)
	begin
		set @RecurrenceId = null
	end

	UPDATE {databaseOwner}[{objectQualifier}Engage_Event] 
	SET [Title] = @Title, 
		[Overview] = @Overview, 
		[Description] = @Description,
		[EventStart] = @EventStart, 
		[EventEnd] = @EventEnd, 
		[Organizer] = @Organizer, 
		[OrganizerEmail] = @OrganizerEmail,
		[Location] = @Location, 
		[LocationUrl] = @LocationUrl, 
		[InvitationUrl] = @InvitationUrl, 
		[RecapUrl] = @RecapUrl, 
		[RecurrenceId] = @RecurrenceId, 
		[CanRsvp] = @CanRsvp, 
		[Cancelled]  = @Cancelled,
		[RevisingUser] = @RevisingUser, 
		[RevisionDate] = GETDATE()
	WHERE EventId = @EventId
END
GO

--since EventListing is no longer support - update tabmodules settings to display the new Templated View.

Update {databaseOwner}[{objectQualifier}TabModuleSettings]
set SettingValue = 'Display/EventListingTemplate'
Where SettingName = 'DisplayType' And SettingValue = 'Display/EventListing'
GO
