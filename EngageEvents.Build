<?xml version="1.0" encoding="utf-8" ?>
<project xmlns="http://nant.sf.net/release/0.86-beta1/nant.xsd" name="Engage: Events" basedir="." default="package">
  <property name="build" value="true" overwrite="false"/>
  <property name="bin.directory" value="..\..\bin" overwrite="false"/>
  <property name="project.config" value="release"/>
  <property name="project.name" value="Events"/>
  <property name="solution.file" value="Engage${project.name}.sln"/>
  <property name="references.directory" value="References"/>
  <property name="project.dll" value="${bin.directory}\Engage${project.name}.dll"/>

  <target name="build" description="rebuilds the solution" if="${build}">
    <solution configuration="${project.config}" solutionfile="${solution.file}">
      <assemblyfolders>
        <include name="${references.directory}"/>
      </assemblyfolders>
    </solution>
  </target>
  <target name="get-version" depends="build">
    <property name="version" value="${assemblyname::get-version(assembly::get-name(assembly::load-from-file(project.dll)))}" />
    <property name="project.version" value="${string::substring(version,0,string::last-index-of(version,'.'))}" />
  </target>
  <target name="package" depends="get-version">
    <property name="package.directory" value="package"/>
    <property name="package.name" value="Resources.zip"/>
    <property name="package.license" value="Standard"/>
    <property name="includeSource" value="false"/>

    <call target="zip-resources"/>
    <call target="zip-package"/>

    <property name="package.license" value="Professional"/>
    <call target="zip-package"/>

    <property name="package.license" value="Enterprise"/>
    <call target="zip-package"/>

    <property name="includeSource" value="true"/>
    <call target="zip-resources"/>
    <call target="zip-package"/>

    <zip zipfile="${package.directory}/${project.name}_${package.license}_${project.version}.zip">
      <fileset basedir="${package.directory}">
        <include name="${project.name}_${package.license}_${project.version}_Install.zip"/>
        <include name="${project.name}_${package.license}_${project.version}_Source.zip"/>
      </fileset>
    </zip>

    <delete file="${package.directory}/${project.name}_${package.license}_${project.version}_Install.zip" failonerror="false"/>
    <delete file="${package.directory}/${project.name}_${package.license}_${project.version}_Source.zip" failonerror="false"/>
    <delete file="${package.directory}/${package.name}" failonerror="false"/>

    <call target="project-specific-tasks"/>
  </target>
  <target name="zip-resources">
    <mkdir dir="${package.directory}" unless="${directory::exists(package.directory)}"/>
    <mkdir dir="${package.directory}/temp" unless="${directory::exists(package.directory + '/temp')}"/>
    <copy todir="${package.directory}/temp" flatten="false">
      <fileset>
        <include name="**/*.ascx" />
        <include name="**/*.aspx" />
        <include name="**/*.asmx" />
        <include name="**/*.resx" />
        <include name="**/*.html" />
        <include name="**/*.htm" />
        <include name="**/*.css" />
        <include name="**/*.jpg" />
        <include name="**/*.gif" />
        <include name="**/*.png" />
        <include name="**/*.pdf" />
        <include name="**/*.js" if="${includeSource}"/>
        <include name="**/*.cs" if="${includeSource}"/>
        <include name="**/*.vb" if="${includeSource}"/>
        <include name="**/*.sln" if="${includeSource}"/>
        <include name="**/*.csproj" if="${includeSource}"/>
        <include name="**/*.vbproj" if="${includeSource}"/>
        <include name="**/*.build" if="${includeSource}"/>
        <include name="**/*.dnn" if="${includeSource}"/>
        <include name="**/*.docx" if="${includeSource}"/>
        <exclude name="obj/**"/>
      </fileset>
    </copy>
    <zip zipfile="${package.directory}/${package.name}">
      <fileset basedir="${package.directory}/temp">
        <include name="**/*"/>
      </fileset>
    </zip>
    <delete dir="${package.directory}/temp" failonerror="false"/>
  </target>
  <target name="zip-package">
    <mkdir dir="${package.directory}" unless="${directory::exists(package.directory)}"/>
    <mkdir dir="${package.directory}/temp" unless="${directory::exists(package.directory + '/temp')}"/>
    <copy todir="${package.directory}/temp" flatten="true">
      <fileset>
        <include name="${package.directory}/${package.name}"/>
        <include name="${project.dll}"/>
        <include name="${references.directory}/*.dll"/>
        <include name="Licenses/EULA-${package.license}.txt"/>
        <include name="??.??.??.txt" />
        <include name="ReadMe.txt" />
        <include name="**/*.SqlDataProvider"/>
        <include name="**/*.dnn"/>
        <exclude name="${references.directory}/DotNetNuke.dll"/>
        <exclude name="${references.directory}/DotNetNuke.WebUtility.dll"/>
        <exclude name="${references.directory}/Microsoft.ApplicationBlocks.Data.dll"/>
      </fileset>
    </copy>

    <property name="package.type" value="Install"/>
    <if test="${includeSource}">
      <property name="package.type" value="Source"/>
    </if>
    <zip zipfile="${package.directory}/${project.name}_${package.license}_${project.version}_${package.type}.zip">
      <fileset basedir="${package.directory}/temp">
        <include name="**/*"/>
      </fileset>
    </zip>
    <delete dir="${package.directory}/temp" failonerror="false"/>
  </target>
  <target name="project-specific-tasks" description="Place tasks specific to the current project in this task">
    
  </target>
  <!--<target name="BuildContentPackage" description="Builds a resources zip file from the content items in the VS project">
    <loadfile file="${solution.file}" property="solution.text"/>
    <echo message="${solution.text}"/>
    <regex pattern="Project\(&quot;{[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}}&quot;\)\s?=\s?&quot;[^&quot;]*&quot;,\s?&quot;(?&lt;projectfile&gt;[^&quot;]*\.[^&quot;]*)" input="${solution.text}"/>
    <echo message="${projectfile}"/>
    <xmlpeek file="${projectfile}" property="content.filegroup" xpath="/n:Project/n:ItemGroup/n:Content">
      <namespaces>
        <namespace prefix="n" uri="http://schemas.microsoft.com/developer/msbuild/2003"/>
      </namespaces>
    </xmlpeek>
    <echo message="${content.filegroup}"/>
  </target>-->
</project>