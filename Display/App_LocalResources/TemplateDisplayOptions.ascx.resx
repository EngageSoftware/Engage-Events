<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="A Specific Date.Text" xml:space="preserve">
    <value>A Specific Date</value>
  </data>
  <data name="A Window of Days After Start.Text" xml:space="preserve">
    <value>A Window of Days After Start</value>
  </data>
  <data name="A Window of Days Before End.Text" xml:space="preserve">
    <value>A Window of Days Before End</value>
  </data>
  <data name="after start.Text" xml:space="preserve">
    <value>after start</value>
  </data>
  <data name="before end.Text" xml:space="preserve">
    <value>before end</value>
  </data>
  <data name="Date Range Without Bounds.Text" xml:space="preserve">
    <value>&lt;p&gt;Today, this will include every event&lt;/p&gt;</value>
  </data>
  <data name="Date Range Without End.Format" xml:space="preserve">
    <value>&lt;p&gt;Today, this will include every event occuring on or after &lt;strong&gt;{0:D}&lt;/strong&lt;/p&gt;</value>
  </data>
  <data name="Date Range Without Start.Format" xml:space="preserve">
    <value>&lt;p&gt;Today, this will include every event occuring before the end of &lt;strong&gt;{1:D}&lt;/strong&gt;&lt;/p&gt;</value>
  </data>
  <data name="Date Range.Format" xml:space="preserve">
    <value>&lt;p&gt;Today, this will include every event occuring between the beginning of &lt;strong&gt;{0:D}&lt;/strong&gt; and the end of &lt;strong&gt;{1:D}&lt;/strong&gt;&lt;/p&gt;</value>
  </data>
  <data name="Days.Text" xml:space="preserve">
    <value>Days</value>
  </data>
  <data name="DisplayModeLabel.Text" xml:space="preserve">
    <value>Date Range</value>
  </data>
  <data name="Months..Text" xml:space="preserve">
    <value>Months</value>
  </data>
  <data name="Next Month.Text" xml:space="preserve">
    <value>Next Month</value>
  </data>
  <data name="PagingLabel.Help" xml:space="preserve">
    <value>Specify how many records you want to display per page.</value>
  </data>
  <data name="PagingLabel.Text" xml:space="preserve">
    <value>Enter the number of events to display per page</value>
  </data>
  <data name="RangeEndLabel.Help" xml:space="preserve">
    <value>Choose the end of the range of events to display.  Events which occur after the selected range will not be included in the listing.  Note that when selecting a "range," such as This Month, you are effectively selecting the last date of that range (so, selecting This Month for the Start and End will give you the full month of events).  Events which start during the range and end after the range ends will still be included.</value>
  </data>
  <data name="RangeEndLabel.Text" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="RangeStartLabel.Help" xml:space="preserve">
    <value>Choose the beginning of the range of events to display.  Events which occur before the selected date will not be included in the listing. Note that events which occur on the selected date will be included, and events which begin before the selected date but are still occuring on the selected date will also be included.</value>
  </data>
  <data name="RangeStartLabel.Text" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="RecordsPerPageRequiredValidator.Text" xml:space="preserve">
    <value>You must supply the number of events to display per page</value>
  </data>
  <data name="The Beginning of Time.Text" xml:space="preserve">
    <value>The Beginning of Time</value>
  </data>
  <data name="The End of Time.Text" xml:space="preserve">
    <value>The End of Time</value>
  </data>
  <data name="This Month.Text" xml:space="preserve">
    <value>This Month</value>
  </data>
  <data name="This Year.Text" xml:space="preserve">
    <value>This Year</value>
  </data>
  <data name="Today.Text" xml:space="preserve">
    <value>Today</value>
  </data>
  <data name="Tomorrow.Text" xml:space="preserve">
    <value>Tomorrow</value>
  </data>
  <data name="Years.Text" xml:space="preserve">
    <value>Years</value>
  </data>
  <data name="Yesterday.Text" xml:space="preserve">
    <value>Yesterday</value>
  </data>
  <data name="Both Window.Text" xml:space="preserve">
    <value>Start and End cannot both be a window</value>
  </data>
  <data name="Missing specificDate.Text" xml:space="preserve">
    <value>Please specify the date</value>
  </data>
  <data name="Missing windowAmount.Text" xml:space="preserve">
    <value>Please specify the window amount</value>
  </data>
  <data name="Missing windowInterval.Text" xml:space="preserve">
    <value>Please specify the window interval</value>
  </data>
  <data name="Window to Beginning of Time.Text" xml:space="preserve">
    <value>A window of days is not valid against the beginning of time</value>
  </data>
  <data name="Window to End of Time.Text" xml:space="preserve">
    <value>A window of days is not valid against the end of time</value>
  </data>
</root>